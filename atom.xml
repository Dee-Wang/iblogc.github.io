<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iblogc&#39;s blog</title>
  <subtitle>Just do it.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://me.iblogc.com/"/>
  <updated>2016-12-19T14:30:48.000Z</updated>
  <id>http://me.iblogc.com/</id>
  
  <author>
    <name>沙丁鱼</name>
    <email>me@iblogc.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django Rest framework入门笔记及跳坑记录</title>
    <link href="http://me.iblogc.com/2016/12/17/django-rest-framework%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E5%8F%8A%E8%B7%B3%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://me.iblogc.com/2016/12/17/django-rest-framework入门笔记及跳坑记录/</id>
    <published>2016-12-17T07:03:10.000Z</published>
    <updated>2016-12-19T14:30:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><a id="more"></a></p>
<h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>2016-01-26 初稿</p>
<h2 id="序列化时嵌套显示外键关联字段"><a href="#序列化时嵌套显示外键关联字段" class="headerlink" title="序列化时嵌套显示外键关联字段"></a>序列化时嵌套显示外键关联字段</h2><ul>
<li><p>自动<br>使用<code>depth</code>参数指定外键深度</p>
</li>
<li><p>手动指定<br>使用外键对应<code>model</code>的小写为属性，外键对应的<code>model</code>序列化程序为值<br>以下例子在<code>HospitalPic</code>序列化结果里嵌套显示<code>Hospital</code><br>models.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hospital</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField()</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HospitalPic</span><span class="params">(models.Model)</span>:</span></div><div class="line">    hospital = models.ForeignKey(Hospital)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>serializers.py<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HospitalSerializer</span><span class="params">(serializers.HyperlinkedModelSerializer)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = Hospital </div><div class="line">        fields = <span class="string">'__all__'</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HospitalPicSerializer</span><span class="params">(serializers.HyperlinkedModelSerializer)</span>:</span></div><div class="line">    hospital = HospitalSerializer()</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = HospitalPic</div><div class="line">        fields = <span class="string">'__all__'</span></div></pre></td></tr></table></figure></p>
<p><strong><em>反向关系嵌套</em></strong><br>在<code>Hospital</code>序列化结果里嵌套显示<code>HospitalPic</code><br>serializers.py<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HospitalPicSerializer</span><span class="params">(serializers.HyperlinkedModelSerializer)</span>:</span> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = HospitalPic</div><div class="line">        fields = <span class="string">'__all__'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HospitalSerializer</span><span class="params">(serializers.HyperlinkedModelSerializer)</span>:</span></div><div class="line">    hospitalpic_set = HospitalPicSerializer(many=Ture)</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = Hospital</div><div class="line">        fields = <span class="string">'__all__'</span></div></pre></td></tr></table></figure></p>
<h2 id="在序列化对象里添加关联表的字段内容"><a href="#在序列化对象里添加关联表的字段内容" class="headerlink" title="在序列化对象里添加关联表的字段内容"></a>在序列化对象里添加关联表的字段内容</h2><p>定义一个<code>serializer Field</code>，并添加参数<code>source</code>指向外键对对应的字段（<code>source</code>值其实是从当前序列化的实例的属性）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">my_address= serializers.ReadOnlyField(source=<span class="string">'address.full_address'</span>)</div></pre></td></tr></table></figure></p>
<h2 id="在序列化对象里添加自定义内容"><a href="#在序列化对象里添加自定义内容" class="headerlink" title="在序列化对象里添加自定义内容"></a>在序列化对象里添加自定义内容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</div><div class="line"><span class="keyword">from</span> django.utils.timezone <span class="keyword">import</span> now</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    days_since_joined = serializers.SerializerMethodField()</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = User</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_days_since_joined</span><span class="params">(self, obj)</span>:</span></div><div class="line">        <span class="keyword">return</span> (now() - obj.date_joined).days</div></pre></td></tr></table></figure>
<h2 id="使用ViewSet，并不有设置queryset，而是重写了get-queryset时，需要在router里增加base-name参数（base-name为router为ViewSet注册url时自动添加的name前缀，如果未设置则从ViewSet的queryset里取，使用ViewSet自动生成的url-name为-list-detail-等）"><a href="#使用ViewSet，并不有设置queryset，而是重写了get-queryset时，需要在router里增加base-name参数（base-name为router为ViewSet注册url时自动添加的name前缀，如果未设置则从ViewSet的queryset里取，使用ViewSet自动生成的url-name为-list-detail-等）" class="headerlink" title="使用ViewSet，并不有设置queryset，而是重写了get_queryset时，需要在router里增加base_name参数（base_name为router为ViewSet注册url时自动添加的name前缀，如果未设置则从ViewSet的queryset里取，使用ViewSet自动生成的url name为-list -detail 等）"></a>使用<code>ViewSet</code>，并不有设置<code>queryset</code>，而是重写了<code>get_queryset</code>时，需要在<code>router</code>里增加<code>base_name</code>参数（<code>base_name</code>为<code>router</code>为<code>ViewSet</code>注册url时自动添加的name前缀，如果未设置则从<code>ViewSet</code>的<code>queryset</code>里取，使用<code>ViewSet</code>自动生成的url name为<base_name>-list <base_name>-detail 等）</base_name></base_name></h2><p>views.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></div><div class="line">    serializer_class = ContactSerializer</div><div class="line">    permission_classes = (permissions.IsAuthenticated,)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.request.user.contact_set.all()</div></pre></td></tr></table></figure></p>
<p>urls.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">router.register(<span class="string">r'contact'</span>, ContactViewSet, base_name=<span class="string">'contact'</span>)</div></pre></td></tr></table></figure></p>
<p>未设置<code>base_name</code>会报下面错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;base_name&apos; argument not specified, and could not automatically determine the name from the viewset, as it does not have a &apos;.queryset&apos; attribute.</div></pre></td></tr></table></figure></p>
<h2 id="给api接口的url添加了命名空间namespace"><a href="#给api接口的url添加了命名空间namespace" class="headerlink" title="给api接口的url添加了命名空间namespace"></a>给api接口的url添加了命名空间<code>namespace</code></h2><p>urls.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url(<span class="string">r'^api/'</span>, include(router.urls, namespace=<span class="string">'api'</span>)),</div></pre></td></tr></table></figure></p>
<p>需要对<code>HyperlinkedRelatedField</code>字段的参数进行修改<br>serializers.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HospitalPicSerializer</span><span class="params">(serializers.HyperlinkedModelSerializer)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = HospitalPic</div><div class="line">        fields = <span class="string">'__all__'</span></div><div class="line">        extra_kwargs = &#123;</div><div class="line">            <span class="string">'url'</span>: &#123;<span class="string">'view_name'</span>: <span class="string">'api:hospitalpic-detail'</span>&#125;,</div><div class="line">            <span class="string">'hospital'</span>: &#123;<span class="string">'view_name'</span>: <span class="string">'api:hospital-detail'</span>&#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>不然会出现以下错误<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Could <span class="keyword">not</span> resolve URL <span class="keyword">for</span> hyperlinked relationship using view name <span class="string">"user-detail"</span>. You may have failed to include the related model <span class="keyword">in</span> your API, <span class="keyword">or</span> incorrectly configured the `lookup_field` attribute on this field.</div></pre></td></tr></table></figure></p>
<p>不过话说我们全api的url加<code>namespace</code>一般是为了版本控制，所以有一种简单的方法,只要在settings.py添加基于<code>namespace</code>的版本控制，这样就不需要修改<code>HyperlinkedRelatedField</code>字段的<code>view_name</code>了<br>urls.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">url(<span class="string">r'^api/v1/'</span>, include(router.urls, namespace=<span class="string">'v1'</span>)),</div><div class="line">url(<span class="string">r'^api/v2/'</span>, include(router.urls, namespace=<span class="string">'v2'</span>)),</div></pre></td></tr></table></figure></p>
<p>settings.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    ……</div><div class="line">    <span class="string">'DEFAULT_VERSIONING_CLASS'</span>: <span class="string">'rest_framework.versioning.NamespaceVersioning'</span>,</div><div class="line">    ……</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="要drf的错误提示为中文，需要设置"><a href="#要drf的错误提示为中文，需要设置" class="headerlink" title="要drf的错误提示为中文，需要设置"></a>要drf的错误提示为中文，需要设置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LANGUAGE_CODE = <span class="string">'zh-CN'</span></div></pre></td></tr></table></figure>
<p>如果设置为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LANGUAGE_CODE = <span class="string">'zh-Hans'</span></div></pre></td></tr></table></figure></p>
<p>虽然django默认表单错误会输出中文，但drf还是输出英文</p>
<h2 id="django的validators可以直接在drf中使用，不需要做任何修改"><a href="#django的validators可以直接在drf中使用，不需要做任何修改" class="headerlink" title="django的validators可以直接在drf中使用，不需要做任何修改"></a>django的<code>validators</code>可以直接在drf中使用，不需要做任何修改</h2><h2 id="当字段里的属性editable-False时，ModelSerializer里该字段会抛弃model里显式和隐式（unique）的所有validators"><a href="#当字段里的属性editable-False时，ModelSerializer里该字段会抛弃model里显式和隐式（unique）的所有validators" class="headerlink" title="当字段里的属性editable=False时，ModelSerializer里该字段会抛弃model里显式和隐式（unique）的所有validators"></a>当字段里的属性<code>editable=False</code>时，<code>ModelSerializer</code>里该字段会抛弃<code>model</code>里显式和隐式（unique）的所有<code>validators</code></h2><h2 id="Serializer里write-only写在field里和写在extra-kwargs里是有区别的，"><a href="#Serializer里write-only写在field里和写在extra-kwargs里是有区别的，" class="headerlink" title="Serializer里write_only写在field里和写在extra_kwargs里是有区别的，"></a><code>Serializer</code>里<code>write_only</code>写在<code>field</code>里和写在<code>extra_kwargs</code>里是有区别的，</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRegisterSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    <span class="string">"""用户注册Serializer"""</span></div><div class="line"> </div><div class="line">    code = serializers.CharField(min_length=<span class="number">4</span>, max_length=<span class="number">6</span>, label=_(<span class="string">'验证码'</span>),</div><div class="line">                                 help_text=_(<span class="string">'验证码'</span>), write_only=<span class="keyword">True</span>)</div><div class="line">    re_password = serializers.CharField(label=_(<span class="string">'重复密码'</span>), help_text=_(<span class="string">'重复密码'</span>),</div><div class="line">                                        validators=validators.password_validators(),</div><div class="line">                                        write_only=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = User</div><div class="line">        fields = (<span class="string">'mobile_phone'</span>, <span class="string">'code'</span>, <span class="string">'password'</span>, <span class="string">'re_password'</span>)</div><div class="line">        extra_kwargs = &#123;<span class="string">'password'</span>:</div><div class="line">                            &#123;<span class="string">'write_only'</span>: <span class="keyword">True</span>&#125;</div><div class="line">                        &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, attrs)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Check that the start is before the stop.</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> attrs[<span class="string">'password'</span>] != attrs[<span class="string">'re_password'</span>]:</div><div class="line">            <span class="keyword">raise</span> serializers.ValidationError(_(<span class="string">'密码不一致'</span>))</div><div class="line"> </div><div class="line">        <span class="comment"># 校验验证码</span></div><div class="line">        verify_result = Sms(attrs[<span class="string">'mobile_phone'</span>]).verify_sms_code(</div><div class="line">            attrs.pop(<span class="string">'code'</span>))</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> verify_result:</div><div class="line">            error = verify_result.get(<span class="string">'error'</span>)</div><div class="line">            <span class="keyword">raise</span> ParseError(error)</div><div class="line">        <span class="keyword">return</span> attrs</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span></div><div class="line">        user = User(</div><div class="line">            username=validated_data[<span class="string">'mobile_phone'</span>],</div><div class="line">            mobile_phone=validated_data[<span class="string">'mobile_phone'</span>],</div><div class="line">        )</div><div class="line">        user.set_password(validated_data[<span class="string">'password'</span>])</div><div class="line">        user.save()</div><div class="line">        <span class="keyword">return</span> user</div></pre></td></tr></table></figure>
<p>因为<code>create()</code>这个方法return了一个<code>user</code>实例，<code>User</code>里没有的字段<code>code</code>和<code>re_password</code>需要将<code>write_only</code>写在<code>field</code>参数里，不然会报以下错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AttributeError: Got AttributeError when attempting to get a value for field `code` on serializer `UserRegisterSerializer`.</div><div class="line">The serializer field might be named incorrectly and not match any attribute or key on the `User` instance.</div><div class="line">Original exception text was: &apos;User&apos; object has no attribute &apos;code&apos;.</div></pre></td></tr></table></figure></p>
<h2 id="如果使用django-rest-swagger报以下错误"><a href="#如果使用django-rest-swagger报以下错误" class="headerlink" title="如果使用django-rest-swagger报以下错误"></a>如果使用<code>django-rest-swagger</code>报以下错误</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Can&apos;t read from server. It may not have the appropriate access-control-origin settings.</div></pre></td></tr></table></figure>
<p>注释掉设置里的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 'base_path': '127.0.0.1:8000/docs',</span></div></pre></td></tr></table></figure></p>
<h2 id="serializer-data和serializer-validated-data"><a href="#serializer-data和serializer-validated-data" class="headerlink" title="serializer.data和serializer.validated_data"></a><code>serializer.data</code>和<code>serializer.validated_data</code></h2><p>在<code>serializer</code>只使用<code>data</code>参数实例化的时：</p>
<ul>
<li><code>serializer.data</code>是原始数据（字符串），<code>serializer.validated_data</code>是进行数据验证并转换成对应数据类型的数据。</li>
<li>两者者必须在<code>serializer</code>调用<code>is_valid</code>方法后才能调用<br>在<code>serializer</code>只使用<code>instance</code>参数实例化时：</li>
<li>只有<code>serializer.data</code>没有<code>serializer.validated_data</code>，并且<code>serializer.data</code>里的数据也是字符串；</li>
<li>没有方法<code>is_valid</code>；</li>
<li>即<code>is_valid</code>和<code>validated_data</code>只在有data参数实例化时才可调用；</li>
</ul>
<h2 id="在serializer里获取原始请求信息"><a href="#在serializer里获取原始请求信息" class="headerlink" title="在serializer里获取原始请求信息"></a>在<code>serializer</code>里获取原始请求信息</h2><p>默认的，上下文信息会被传递到<code>serializer</code>里，所以在<code>serializer</code>可以直接使用<code>self.context[&#39;request&#39;]</code>来获取请求信息。（在要继承自<code>viewsets.GenericViewSet</code>的类里使用的<code>serializer</code>才能取到，如果是继承<code>APIView</code>的，自己传入即可<code>serializer = self.serializer_class(data=request.data, context={&#39;request&#39;: request})</code>）</p>
<h2 id="自定义serializer字段"><a href="#自定义serializer字段" class="headerlink" title="自定义serializer字段"></a>自定义<code>serializer</code>字段</h2><p>自定义字段继承<code>serializers.Field</code>，<code>to_representation</code>方法处理出来的数据用来序列化显示，<code>to_internal_value</code>处理接收到的数据，<code>get_attribute</code>方法指定这个字段访问的实例属性，<code>get_value</code>方法指定<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QiNiuField</span><span class="params">(serializers.Field)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_attribute</span><span class="params">(self, instance)</span>:</span></div><div class="line">        <span class="comment"># （序列化时）从模型实例中取一个值给这个字段处理,也可以使用`source`参数指定</span></div><div class="line">        <span class="keyword">return</span> instance.key</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_value</span><span class="params">(self, dictionary)</span>:</span></div><div class="line">        <span class="comment"># （反序列化时）从传入数据中提取一个值给这个字段处理</span></div><div class="line">        <span class="keyword">return</span> super(QiNiuField, self).get_value(dictionary)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_representation</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="comment"># （序列化时）处理出来的数据用来序列化显示</span></div><div class="line">        <span class="keyword">return</span> value.url</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_internal_value</span><span class="params">(self, data)</span>:</span></div><div class="line">        <span class="comment"># （反序列化时）处理接收到的数据</span></div><div class="line">        <span class="keyword">return</span> data[<span class="string">'key'</span>]</div></pre></td></tr></table></figure></p>
<h2 id="嵌套序列化，传参问题"><a href="#嵌套序列化，传参问题" class="headerlink" title="嵌套序列化，传参问题"></a>嵌套序列化，传参问题</h2><p>官方文档中有这么一个例子<a href="http://www.django-rest-framework.org/api-guide/serializers/#dealing-with-nested-objects" target="_blank" rel="external">Dealing with nested objects</a><br>如果是以<code>Content-Type:application/json</code>形式传数据格式传数据，直接嵌套传就可以了<code>{&#39;user&#39;: {&#39;email&#39;: &#39;foobar&#39;, &#39;username&#39;: &#39;doe&#39;}, &#39;content&#39;: &#39;baz&#39;}</code>，但如果是以,<br>但是如果以<code>Content-Type:form-data</code>或<code>Content-Type:x-www-form-urlencoded</code>上传，则上传<code>user</code>信息进不是嵌套，而是就<code>.</code>连接了，<code>&quot;user.email&quot;:&quot;foobar&quot;</code>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br /&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="django" scheme="http://me.iblogc.com/tags/django/"/>
    
      <category term="restful" scheme="http://me.iblogc.com/tags/restful/"/>
    
      <category term="api" scheme="http://me.iblogc.com/tags/api/"/>
    
      <category term="问题" scheme="http://me.iblogc.com/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Django Rest framework使用问题及解决方法</title>
    <link href="http://me.iblogc.com/2016/12/17/django-rest-framework%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://me.iblogc.com/2016/12/17/django-rest-framework使用问题及解决方法/</id>
    <published>2016-12-17T06:58:04.000Z</published>
    <updated>2016-12-17T07:15:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><a id="more"></a></p>
<h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>2016-01-29 初稿</p>
<h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p><code>ViewSet</code>没有写<code>serializer_class</code>属性，而是重写了<code>get_serializer_class()</code>方法，出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cannot use OrderingFilter on a view which does not have either a &apos;serializer_class&apos; or &apos;ordering_fields&apos; attribute.</div></pre></td></tr></table></figure></p>
<p>原因：因为启用了<code>rest_framework.filters.OrderingFilter</code>而没有设置<code>ordering_fields</code><br>解决方法：<code>ViewSet</code>里加<code>ordering_fields</code>属性，可是禁用<code>rest_framework.filters.OrderingFilter</code></p>
<h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p><code>ViewSet</code>没有写<code>queryset</code>属性，而是重写了<code>get_queryset()</code>方法，出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;base_name&apos; argument not specified, and could not automatically determine the name from the viewset, as it does not have a &apos;.queryset&apos; attribute.</div></pre></td></tr></table></figure></p>
<p>解决方法：需要在<code>urls.py</code>里给<code>ViewSet</code>注册<code>Router</code>时添加<code>base_name</code>（<code>base_name</code>为<code>router</code>为<code>ViewSet</code>注册url时自动添加的name前缀，如果未设置则从<code>ViewSet</code>的<code>queryset</code>里取，使用<code>ViewSet</code>自动生成的url name为<base_name>-list <base_name>-detail 等）<br>urls.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">router.register(r&apos;users&apos;, UserViewSet, base_name=&apos;user&apos;)</div></pre></td></tr></table></figure></base_name></base_name></p>
<h2 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h2><p>给url设置了<code>namespace</code><br>urls.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url(<span class="string">r'^api/'</span>, include(router.urls, namespace=<span class="string">'api'</span>)),</div></pre></td></tr></table></figure></p>
<p>访问部分接口出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Could not resolve URL for hyperlinked relationship using view name &quot;user-detail&quot;. You may have failed to include the related model in your API, or incorrectly configured the `lookup_field` attribute on this field.</div></pre></td></tr></table></figure></p>
<p>解决方法1：给所有的<code>serializer</code>里包含的外键字段手动设置<code>view_name</code>值（注意，继承<code>HyperlinkedModelSerializer</code>，会隐式添加一个<code>HyperlinkedRelatedField</code>字段<code>url</code>，而所有的外键都会变成<code>HyperlinkedRelatedField</code>字段，所以需要对两种类型字段手动设置<code>view_name</code>值）<br>serializers.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactSerializer</span><span class="params">(serializers.HyperlinkedModelSerializer)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = Contact</div><div class="line">        fields = <span class="string">'__all__'</span></div><div class="line">        extra_kwargs = &#123;</div><div class="line">            <span class="string">'url'</span>: &#123;<span class="string">'view_name'</span>: <span class="string">'api:contact-detail'</span>&#125;,</div><div class="line">            <span class="string">'user'</span>:&#123;<span class="string">'view_name'</span>:<span class="string">'api:user-detail'</span>&#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>解决方法2：启动drf基于<code>NameSpace</code>的版本控制<br>settings.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    ……</div><div class="line">    <span class="string">'DEFAULT_VERSIONING_CLASS'</span>: <span class="string">'rest_framework.versioning.NamespaceVersioning'</span>,</div><div class="line">    ……</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br /&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="django" scheme="http://me.iblogc.com/tags/django/"/>
    
      <category term="restful" scheme="http://me.iblogc.com/tags/restful/"/>
    
      <category term="api" scheme="http://me.iblogc.com/tags/api/"/>
    
      <category term="问题" scheme="http://me.iblogc.com/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Django Rest framework里的API请求频率控制</title>
    <link href="http://me.iblogc.com/2016/12/17/django-rest-framework%E9%87%8C%E7%9A%84api%E8%AF%B7%E6%B1%82%E9%A2%91%E7%8E%87%E6%8E%A7%E5%88%B6/"/>
    <id>http://me.iblogc.com/2016/12/17/django-rest-framework里的api请求频率控制/</id>
    <published>2016-12-17T06:48:19.000Z</published>
    <updated>2016-12-17T07:01:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><a id="more"></a></p>
<h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>2016-08-25 初稿</p>
<p><code>Django Rest framework</code>有自带的频率控制配置</p>
<h2 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    <span class="string">'DEFAULT_THROTTLE_CLASSES'</span>: (</div><div class="line">        <span class="comment"># 开启匿名用户接口请求频率限制</span></div><div class="line">        <span class="string">'rest_framework.throttling.AnonRateThrottle'</span>,</div><div class="line">        <span class="comment"># 开启授权用户接口请求频率限制</span></div><div class="line">        <span class="string">'rest_framework.throttling.UserRateThrottle'</span></div><div class="line">    ),</div><div class="line">    <span class="string">'DEFAULT_THROTTLE_RATES'</span>: &#123;</div><div class="line">        <span class="comment"># 频率限制有second, minute, hour, day</span></div><div class="line">        <span class="comment"># 匿名用户请求频率</span></div><div class="line">        <span class="string">'anon'</span>: <span class="string">'100/day'</span>,</div><div class="line">        <span class="comment"># 授权用户请求频率</span></div><div class="line">        <span class="string">'user'</span>: <span class="string">'1000/day'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="类视图单独配置"><a href="#类视图单独配置" class="headerlink" title="类视图单独配置"></a>类视图单独配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</div><div class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle</div><div class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleView</span><span class="params">(APIView)</span>:</span></div><div class="line">    throttle_classes = (UserRateThrottle,)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></div><div class="line">        content = &#123;</div><div class="line">            <span class="string">'status'</span>: <span class="string">'request was permitted'</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Response(content)</div></pre></td></tr></table></figure>
<h2 id="方法视图配置"><a href="#方法视图配置" class="headerlink" title="方法视图配置"></a>方法视图配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@api_view(['GET'])</span></div><div class="line"><span class="meta">@throttle_classes([UserRateThrottle])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">example_view</span><span class="params">(request, format=None)</span>:</span></div><div class="line">    content = &#123;</div><div class="line">        <span class="string">'status'</span>: <span class="string">'request was permitted'</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> Response(content)</div></pre></td></tr></table></figure>
<h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><p>方法一：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BurstRateThrottle</span><span class="params">(UserRateThrottle)</span>:</span></div><div class="line">    scope = <span class="string">'burst'</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SustainedRateThrottle</span><span class="params">(UserRateThrottle)</span>:</span></div><div class="line">    scope = <span class="string">'sustained'</span></div><div class="line">...<span class="keyword">and</span> the following settings.</div></pre></td></tr></table></figure></p>
<p><code>settings.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    <span class="string">'DEFAULT_THROTTLE_CLASSES'</span>: (</div><div class="line">        <span class="string">'example.throttles.BurstRateThrottle'</span>,</div><div class="line">        <span class="string">'example.throttles.SustainedRateThrottle'</span></div><div class="line">    ),</div><div class="line">    <span class="string">'DEFAULT_THROTTLE_RATES'</span>: &#123;</div><div class="line">        <span class="string">'burst'</span>: <span class="string">'60/min'</span>,</div><div class="line">        <span class="string">'sustained'</span>: <span class="string">'1000/day'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在视图里设置<code>throttle_classes</code>即可。</p>
<p>方法二：<br><code>settings.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    <span class="string">'DEFAULT_THROTTLE_CLASSES'</span>: (</div><div class="line">        <span class="string">'rest_framework.throttling.ScopedRateThrottle'</span>,</div><div class="line">    ),</div><div class="line">    <span class="string">'DEFAULT_THROTTLE_RATES'</span>: &#123;</div><div class="line">        <span class="string">'contacts'</span>: <span class="string">'1000/day'</span>,</div><div class="line">        <span class="string">'uploads'</span>: <span class="string">'20/day'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在类视图中设置<code>throttle_scope</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactListView</span><span class="params">(APIView)</span>:</span></div><div class="line">    throttle_scope = <span class="string">'contacts'</span></div><div class="line">    ...</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactDetailView</span><span class="params">(APIView)</span>:</span></div><div class="line">    throttle_scope = <span class="string">'contacts'</span></div><div class="line">    ...</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadView</span><span class="params">(APIView)</span>:</span></div><div class="line">    throttle_scope = <span class="string">'uploads'</span></div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<p><strong>1. 匿名用户频率如果设置大于授权用户频率，则以授权用户频率为准。</strong><br><strong>2. 频率限制是针对单个接口的频率，而不是所有接口的频率。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br /&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="django" scheme="http://me.iblogc.com/tags/django/"/>
    
      <category term="restful" scheme="http://me.iblogc.com/tags/restful/"/>
    
      <category term="api， version" scheme="http://me.iblogc.com/tags/api%EF%BC%8C-version/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS7上用MySQL+Nginx+Gunicorn+Supervisor部署Django</title>
    <link href="http://me.iblogc.com/2016/12/08/%E5%9C%A8centos7%E4%BD%BF%E7%94%A8mysql-nginx-gunicorn+supervisor%E9%83%A8%E7%BD%B2django/"/>
    <id>http://me.iblogc.com/2016/12/08/在centos7使用mysql-nginx-gunicorn+supervisor部署django/</id>
    <published>2016-12-08T15:19:59.000Z</published>
    <updated>2017-02-09T16:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录下在CentOS下部署Django项目的步骤。<br><a id="more"></a></p>
<h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>2016-12-08 初稿<br>2016-12-17 增加Supervisor内容</p>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="安装mysql和mysql-devel"><a href="#安装mysql和mysql-devel" class="headerlink" title="安装mysql和mysql-devel"></a>安装mysql和mysql-devel</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install mysql</div><div class="line">yum install mysql-devel</div></pre></td></tr></table></figure>
<h3 id="安装mysql-server"><a href="#安装mysql-server" class="headerlink" title="安装mysql-server"></a>安装mysql-server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</div><div class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm</div><div class="line">yum install mysql-community-server</div></pre></td></tr></table></figure>
<h3 id="重启mysql服务"><a href="#重启mysql服务" class="headerlink" title="重启mysql服务"></a>重启mysql服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysqld restart</div></pre></td></tr></table></figure>
<h3 id="设置root密码"><a href="#设置root密码" class="headerlink" title="设置root密码"></a>设置root密码</h3><p>初次安装mysql需要设置root密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql -uroot</div><div class="line">set password for &apos;root&apos;@&apos;localhost&apos; =password(&apos;password&apos;);</div></pre></td></tr></table></figure></p>
<h3 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h3><p>在<code>/etc/my.cnf</code>文件中[mysql]和[mysql]中添加以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[mysql]</div><div class="line">default-character-set=utf8</div><div class="line"></div><div class="line">[mysqld]</div><div class="line">default-character-set=utf8</div></pre></td></tr></table></figure></p>
<p>字符编码保持和<code>/usr/share/mysql/charsets/Index.xml</code>中的一致。</p>
<h3 id="远程连接设置"><a href="#远程连接设置" class="headerlink" title="远程连接设置"></a>远程连接设置</h3><p>把在所有数据库的所有表的所有权限赋值给位于所有IP地址的root用户。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; grant all privileges on *.* to root@&apos;%&apos;identified by &apos;password&apos;;</div></pre></td></tr></table></figure></p>
<p>如果是新用户而不是root，则要先新建用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;create user &apos;username&apos;@&apos;%&apos; identified by &apos;password&apos;;</div></pre></td></tr></table></figure></p>
<p>此时就可以进行远程连接了。</p>
<h2 id="Virtualenv"><a href="#Virtualenv" class="headerlink" title="Virtualenv"></a>Virtualenv</h2><p>安装epel扩展源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install epel-release</div></pre></td></tr></table></figure></p>
<p>安装pip<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install python-pip</div></pre></td></tr></table></figure></p>
<p>安装virtualenv和virtualenvwrapper<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install virtualenv virtualenvwrapper</div></pre></td></tr></table></figure></p>
<p>编辑<code>~/.bashrc</code>文件，结尾添加以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export WORKON_HOME=~/.virtualenvs</div><div class="line">source /usr/bin/virtualenvwrapper.sh</div></pre></td></tr></table></figure></p>
<p>然后执行以下命令使配置生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.bashrc</div></pre></td></tr></table></figure></p>
<p>创建env<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkvirtualenv explame</div></pre></td></tr></table></figure></p>
<p>使用pip安装项目需要的包</p>
<h2 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h2><p>在项目目录下新建<code>nginx_wsgi.py</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch nginx_wsgi.py</div></pre></td></tr></table></figure></p>
<p>添加如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">import site</div><div class="line">import os</div><div class="line"> </div><div class="line"># site-packages</div><div class="line">site.addsitedir(&apos;/home/nginxuser/.virtualenvs/example/lib/python2.7/site-packages&apos;)</div><div class="line"># Add the  project  directory</div><div class="line"># sys.path.append(&apos;/home/nginxuser/nginxuser&apos;)</div><div class="line">PROJECT_DIR = &apos;/home/nginxuser/projects/example&apos;</div><div class="line">sys.path.insert(0, PROJECT_DIR)</div><div class="line">os.environ[&apos;DJANGO_SETTINGS_MODULE&apos;] = &apos;example.settings.prod&apos;</div><div class="line"># Activate your virtual env</div><div class="line">activate_env = os.path.expanduser(&quot;/home/nginxuser/.virtualenvs/example/bin/activate_this.py&quot;)</div><div class="line">execfile(activate_env, dict(__file__=activate_env))</div><div class="line"> </div><div class="line"># after activite env</div><div class="line">from django.core.wsgi import get_wsgi_application</div><div class="line"> </div><div class="line">application = get_wsgi_application()</div></pre></td></tr></table></figure></p>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install nginx</div></pre></td></tr></table></figure>
<h3 id="检查配置是否有错"><a href="#检查配置是否有错" class="headerlink" title="检查配置是否有错"></a>检查配置是否有错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -t -c /etc/nginx/nginx.conf</div></pre></td></tr></table></figure>
<h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service nginx start</div></pre></td></tr></table></figure>
<h3 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl enable nginx</div></pre></td></tr></table></figure>
<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">useradd nginxuser</div><div class="line">passwd nginxuser</div></pre></td></tr></table></figure>
<h3 id="修改nginx主配置"><a href="#修改nginx主配置" class="headerlink" title="修改nginx主配置"></a>修改nginx主配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/nginx/nginx.conf</div></pre></td></tr></table></figure>
<p>非注释首行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user nginx</div></pre></td></tr></table></figure></p>
<p>改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user nginxuser</div></pre></td></tr></table></figure></p>
<p>不然可能会出现网站静态文件访问报403问题。</p>
<h3 id="新建网站运行配置"><a href="#新建网站运行配置" class="headerlink" title="新建网站运行配置"></a>新建网站运行配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/nginx/conf.d/example.conf</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">server &#123;                                                               </div><div class="line">    listen      80;                                                    </div><div class="line">    server_name example.com;                            </div><div class="line">    charset     utf-8;                                                 </div><div class="line">    client_max_body_size 75M;                                          </div><div class="line">    access_log /home/nginxuser/projects/example/nginxlogs/access.log;</div><div class="line">    error_log /home/nginxuser/projects/example/nginxlogs/error.log;          </div><div class="line"> </div><div class="line">    location /static &#123;                                                 </div><div class="line">        alias /home/nginxuser/projects/explame/static;                </div><div class="line">    &#125;                                                                  </div><div class="line"> </div><div class="line">    location / &#123;                                                       </div><div class="line">        proxy_pass http://127.0.0.1:8000;                              </div><div class="line">        proxy_set_header Host $host;                                   </div><div class="line">        proxy_set_header X-Real-IP $remote_addr;                       </div><div class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;   </div><div class="line">    &#125;                                                                  </div><div class="line">&#125;                                                                       jk</div></pre></td></tr></table></figure>
<h2 id="Gunicorn"><a href="#Gunicorn" class="headerlink" title="Gunicorn"></a>Gunicorn</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install gunicorn</div></pre></td></tr></table></figure>
<p>项目根目录下添加gunicorn运行配置文件gunicorn.conf.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import multiprocessing</div><div class="line">bind = &quot;127.0.0.1:8000&quot;</div><div class="line">workers = 2</div><div class="line">errorlog = &quot;/home/nginxuser/example/gunicorn.error.log&quot;</div><div class="line">#loglevel = &quot;debug&quot;</div><div class="line">proc_name = &quot;gunicorn_example&quot;</div></pre></td></tr></table></figure></p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py</div></pre></td></tr></table></figure>
<p>后台运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nohup gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py&amp;</div></pre></td></tr></table></figure></p>
<p>如果运行报错先使用以下命令检查下nginx配置是否有错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -t -c /etc/nginx/nginx.conf</div></pre></td></tr></table></figure></p>
<h2 id="Supervisor"><a href="#Supervisor" class="headerlink" title="Supervisor"></a>Supervisor</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install supervisor</div></pre></td></tr></table></figure>
<h3 id="创建管理进程配置文件"><a href="#创建管理进程配置文件" class="headerlink" title="创建管理进程配置文件"></a>创建管理进程配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/supervisord.d/example.ini</div></pre></td></tr></table></figure>
<p>（需要注意：用 supervisord 管理时，gunicorn 的 daemon 选项需要设置为 False）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[program:example]</div><div class="line">directory = /home/nginxuser/projects/example ; 程序的启动目录</div><div class="line">command = gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py  ; 启动命令，可以看出与手动在命令行启动的命令是一样的</div><div class="line">autostart = true     ; 在 supervisord 启动的时候也自动启动</div><div class="line">startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了</div><div class="line">autorestart = true   ; 程序异常退出后自动重启</div><div class="line">startretries = 3     ; 启动失败自动重试次数，默认是 3</div><div class="line">user = nginx         ; 用哪个用户启动</div><div class="line">redirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false</div><div class="line">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</div><div class="line">stdout_logfile_backups = 20     ; stdout 日志文件备份数</div><div class="line">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</div><div class="line">stdout_logfile = /data/logs/usercenter_stdout.log</div><div class="line"></div><div class="line">; 可以通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH</div><div class="line">; environment=PYTHONPATH=$PYTHONPATH:/path/to/somewhere</div></pre></td></tr></table></figure></p>
<p><strong>冒号后面要有空格</strong></p>
<h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><p>使用<code>-c</code>指定配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisord -c /etc/supervisord.conf</div></pre></td></tr></table></figure></p>
<p>如果启动时遇到以下报错信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Error: Another program is already listening on a port that one of our HTTP servers is configured to use. Shut this program down first before starting supervisord.</div><div class="line">For help, use /use/bin/supervisord -h</div></pre></td></tr></table></figure></p>
<p>可以使用以下命令解决<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo unlink /var/run/supervisor/supervisor.sock</div></pre></td></tr></table></figure></p>
<h3 id="命令行客户端工具supervisorctl"><a href="#命令行客户端工具supervisorctl" class="headerlink" title="命令行客户端工具supervisorctl"></a>命令行客户端工具supervisorctl</h3><p>启动时需要使用和<code>supervisorctl</code>使用一样的配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisorctl -c /etc/supervisord.conf</div></pre></td></tr></table></figure></p>
<p>启动后进入<code>supervisorctl</code>的shell，在此shell里可以执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">status # 查看程序状态</div><div class="line">start example # 启动example程序</div><div class="line">stop example # 关闭example程序</div><div class="line">restart example # 重启example程序</div><div class="line">reread # 读取有更新（增加）的配置文件，不会启动新添加的程序</div><div class="line">update # 重启配置文件修改过的程序</div></pre></td></tr></table></figure></p>
<p>也可以不进shell执行以上命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">supervisorctl status # 查看程序状态</div><div class="line">supervisorctl start example # 启动example程序</div><div class="line">supervisorctl stop example # 关闭example程序</div><div class="line">supervisorctl restart example # 重启example程序</div><div class="line">supervisorctl reread # 读取有更新（增加）的配置文件，不会启动新添加的程序</div><div class="line">supervisorctl update # 重启配置文件修改过的程序</div></pre></td></tr></table></figure></p>
<h3 id="开启web管理界面"><a href="#开启web管理界面" class="headerlink" title="开启web管理界面"></a>开启web管理界面</h3><p>如果要开启web管理界面，打开<code>/etc/supervisord.conf</code>把下面几行取消注释即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">:[inet_http_server]         ; inet (TCP) server disabled by default</div><div class="line">:port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)</div><div class="line">:username=user              ; (default is no username (open server))</div><div class="line">:password=123               ; (default is no password (open server))</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录下在CentOS下部署Django项目的步骤。&lt;br&gt;
    
    </summary>
    
    
      <category term="程序猿" scheme="http://me.iblogc.com/tags/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
  </entry>
  
  <entry>
    <title>npm入门命令</title>
    <link href="http://me.iblogc.com/2016/07/06/npm%E5%85%A5%E9%97%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://me.iblogc.com/2016/07/06/npm入门命令/</id>
    <published>2016-07-06T15:46:37.000Z</published>
    <updated>2016-07-06T15:52:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><a id="more"></a></p>
<h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>2016-07-06 初稿</p>
<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><p>显示npm版号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm -v</div><div class="line"># 或</div><div class="line">npm version</div></pre></td></tr></table></figure></p>
<p>安装模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 带-g为全局安装</div><div class="line"># 本地安装：package会被下载到当前所在目录，也只能在当前目录下使用。</div><div class="line"># 全局安装：package会被下载到到特定的系统目录下，安装的package能够在所有目录下使用。</div><div class="line">npm install &lt;package&gt; -g</div><div class="line"># 简写</div><div class="line">npm i &lt;package&gt; -g</div></pre></td></tr></table></figure></p>
<p>升级全局安装的指定模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm update &lt;package&gt; -g</div></pre></td></tr></table></figure></p>
<p>升级当前目录下的指定模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm update &lt;package&gt;</div></pre></td></tr></table></figure></p>
<p>升级当前目录下全部模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm update</div></pre></td></tr></table></figure></p>
<p>升级node自身<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 安装一个叫n的模块</div><div class="line">npm install -g n</div><div class="line"># 升级到最新稳定版</div><div class="line">n stable</div><div class="line"># 升级到指定版本</div><div class="line">n v0.10.26</div></pre></td></tr></table></figure></p>
<p>卸载移除指定模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm uninstall &lt;package&gt;</div><div class="line"># 别名：remove, rm, r, un, unlink</div></pre></td></tr></table></figure></p>
<p>显示已安装模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm list</div></pre></td></tr></table></figure></p>
<p>显示模块详细信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm show &lt;package&gt;</div></pre></td></tr></table></figure></p>
<p>查看全局包安装路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm root -g</div></pre></td></tr></table></figure></p>
<p>查看当前包安装路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm root</div></pre></td></tr></table></figure></p>
<p>查看npm配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config list</div></pre></td></tr></table></figure></p>
<p>查看帮助<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm help</div></pre></td></tr></table></figure></p>
<p>查看相关命令的帮助文档<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm help &lt;command&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br/&gt;&lt;br&gt;
    
    </summary>
    
      <category term="程序猿" scheme="http://me.iblogc.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
    
      <category term="npm" scheme="http://me.iblogc.com/tags/npm/"/>
    
      <category term="nodejs" scheme="http://me.iblogc.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Chrome扩展/插件/应用推荐</title>
    <link href="http://me.iblogc.com/2016/06/01/chrome%E6%89%A9%E5%B1%95-%E6%8F%92%E4%BB%B6-%E5%BA%94%E7%94%A8%E6%8E%A8%E8%8D%90/"/>
    <id>http://me.iblogc.com/2016/06/01/chrome扩展-插件-应用推荐/</id>
    <published>2016-06-01T15:22:35.000Z</published>
    <updated>2016-06-02T15:57:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><a id="more"></a></p>
<h2 id="插件-扩展"><a href="#插件-扩展" class="headerlink" title="插件/扩展"></a>插件/扩展</h2><ol>
<li><p><strong>Adblock Plus</strong><br>广告拦截器，谁用谁知道。</p>
</li>
<li><p><strong>Checker Plus for Gmail™</strong><br>Gmail/Inbox插件，不用打开网页处理邮件。</p>
</li>
<li><p><strong>Chrome Sniffer Plus</strong><br>探测当前网页正在使用的开源软件或者js类库，web开发者必备神器。</p>
</li>
<li><p><strong>crxMouse Chrome Gestures</strong><br>鼠标手势。</p>
</li>
<li><p><strong>Ghostery</strong><br>了解谁在跟踪您的网页浏览操作，并可禁用跟踪行为。</p>
</li>
<li><p><strong>Google Keep Chrome 扩展程序</strong><br>将网页快速的保存到Google Keep中。</p>
</li>
<li><p><strong>Google翻译</strong><br>支付在网页中划词翻译。</p>
</li>
<li><p><strong>划词翻译</strong><br>划词翻译，支持谷歌、百度、有道、必应四大翻译和朗读引擎，访问Google比较因难的的可以用这个。</p>
</li>
<li><p><strong>LastPass</strong><br>免费的密码管理管理器。</p>
</li>
<li><p><strong>MindMap Tab</strong><br>在新标签页中快速编辑思维导图。</p>
</li>
<li><p><strong>Octotree</strong><br>在浏览器左侧树形展示Github代码。</p>
</li>
<li><p><strong>Prism Pretty</strong><br>美化代码（html、css、js、json……）</p>
</li>
<li><p><strong>Proxy SwitchyOmega</strong><br>你懂的。</p>
</li>
<li><p><strong>Pushbullet</strong><br>快速的往其它设备发送消息。</p>
</li>
<li><p><strong>Save to Pocket</strong><br>快速保存网页到Pocket。</p>
</li>
<li><p><strong>Search by Image (by Google)</strong><br>浏览器右键增加Google的以图搜图功能。</p>
</li>
<li><p><strong>v2ex plus</strong><br>优雅便捷的 V2EX 扩展。</p>
</li>
<li><p><strong>Web Timer</strong><br>每个网站停留时间统计。</p>
</li>
<li><p><strong>为知笔记网页剪辑器</strong><br>配合为知笔记，快速保存网页内容到为知笔记。</p>
</li>
<li><p><strong>二维码（生成及识别）</strong><br>生成或识别二维码。</p>
</li>
<li><p><strong>惠惠购物助手</strong><br>在主流电商网站页面上提供商品的历史价格，及在同款商品在其它平台的价格比较。</p>
</li>
<li><p><strong>新浪微博图床</strong><br>微博是个好图床。</p>
</li>
<li><p><strong>网页截图:注释&amp;批注</strong><br>捕获整个页面或任何部分，矩形，圆形，箭头，线条和文字，模糊敏感信息，一键上传分享。</p>
</li>
</ol>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ol>
<li><p><strong>Postman</strong><br>功能强大的接口调试工具。</p>
</li>
<li><p><strong>Google Keep - 记事和清单</strong><br>不解释。</p>
</li>
<li><p><strong>Pocket</strong><br>不解释。</p>
</li>
<li><p><strong>JSON Editor</strong><br>图形化json编辑工具。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br/&gt;&lt;br&gt;
    
    </summary>
    
      <category term="优化辅助" scheme="http://me.iblogc.com/categories/%E4%BC%98%E5%8C%96%E8%BE%85%E5%8A%A9/"/>
    
    
      <category term="工具" scheme="http://me.iblogc.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="chrome" scheme="http://me.iblogc.com/tags/chrome/"/>
    
      <category term="扩展" scheme="http://me.iblogc.com/tags/%E6%89%A9%E5%B1%95/"/>
    
      <category term="插件" scheme="http://me.iblogc.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Django 1.9文档阅读笔记</title>
    <link href="http://me.iblogc.com/2016/04/04/django1-9%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://me.iblogc.com/2016/04/04/django1-9文档阅读笔记/</id>
    <published>2016-04-04T07:27:20.000Z</published>
    <updated>2017-02-09T05:24:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><a id="more"></a></p>
<!--more-->
<h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>2016-04-04 初稿<br>2016-06-30 更新内容</p>
<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a><a href="http://python.usyiyi.cn/django/topics/db/models.html" target="_blank" rel="external">模型</a></h2><p><a href="http://python.usyiyi.cn/django_182/ref/models/meta.html#model-meta-field-api" target="_blank" rel="external">Model _meta API</a></p>
<p>限制普通字段的选择范围<br><code>choices</code>，value-text，<br>显示<code>get_foo_display()</code></p>
<p>模型继承</p>
<ol>
<li>抽象基类<ul>
<li>默认继承元类</li>
</ul>
</li>
<li>多表继承<ul>
<li>一般情况不继承元类</li>
</ul>
</li>
<li>代理模型</li>
</ol>
<p>多重继承主要用于<code>mix-in</code>类</p>
<p>多表继承时使用<code>parent_link=True</code>显示指定OneToOne字段</p>
<h2 id="模型字段参考"><a href="#模型字段参考" class="headerlink" title="模型字段参考"></a><a href="http://python.usyiyi.cn/django/ref/models/fields.html#lazy-relationships" target="_blank" rel="external">模型字段参考</a></h2><p>与尚未定义的模型关联使用模型名字（字符串）而非本身（类）</p>
<p>关联自己使用<code>self</code></p>
<p><code>related_name</code> <code>relate_query_name</code></p>
<p>外键关联到特定字段<br><code>to_field</code></p>
<p>限制外键的选择范围（可以是一个字典、一个Q 对象或者一个返回字典或Q对象的可调用对象）<br><code>limit_choices_to</code></p>
<p>外键关联对象删除行为<br><code>on_delete</code></p>
<p>1.8以后保存模型时，未保存的外键对象将被忽略，除非设置<code>allow_unsaved_instance_assignment=True</code></p>
<p>关联自身的多对多关系默认对称，取消对称设置<code>symmetrical=False</code></p>
<p><code>ImageField</code>中的<code>height_field</code>和<code>width_field</code>是用来存储存入图片的高度和宽度值的</p>
<p>##<a href="http://python.usyiyi.cn/django/topics/db/queries.html#spanning-multi-valued-relationships" target="_blank" rel="external">执行查询</a></p>
<p><a href="http://python.usyiyi.cn/django/howto/custom-lookups.html" target="_blank" rel="external">可自定义查询（高级查找）</a><br><code>exclude</code>多条件查询时是用or关系而不是and关系</p>
<p><code>F()</code><br>用于模型内部字段间的比较支持加法、减法、乘法、除法、取模以及幂计算等算术操作<br>支持.bitand() 和.bitor()位操作，<code>update()</code>也可以使用<code>F()</code>但有限制（在update 中你不可以使用F() 对象引入join —— 你只可以引用正在更新的模型的字段）</p>
<p>查询集缓存<br>当只对查询集的部分进行求值时会检查缓存， 但是如果这个部分不在缓存中，那么接下来查询返回的记录都将不会被缓存。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>queryset = Entry.objects.all()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print([p.headline <span class="keyword">for</span> p <span class="keyword">in</span> queryset]) <span class="comment"># Evaluate the query set.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print([p.pub_date <span class="keyword">for</span> p <span class="keyword">in</span> queryset]) <span class="comment"># Re-use the cache from the evaluation.</span></div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>queryset = Entry.objects.all()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> queryset[<span class="number">5</span>] <span class="comment"># Queries the database</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> queryset[<span class="number">5</span>] <span class="comment"># Queries the database again</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; queryset = Entry.objects.all()</div><div class="line">&gt;&gt;&gt; [entry for entry in queryset] # Queries the database</div><div class="line">&gt;&gt;&gt; print queryset[5] # Uses cache</div><div class="line">&gt;&gt;&gt; print queryset[5] # Uses cache</div></pre></td></tr></table></figure>
<p><code>Q()</code><br>可使用Q对象进行复杂查询</p>
<p>判断两相模型实例是否相同，直接使用<code>==</code>比较即可</p>
<p>默认批量删除对象时不会调用实例的<code>delete</code>方法</p>
<p>拷贝实例，把<code>pk</code>设置为<code>None</code>再<code>save</code>即可（如果是继承的，则<code>pk</code>和<code>id</code>都需要设置为<code>None</code>）</p>
<p><code>update()</code>方法也不会调用模型的<code>save()</code>方法，不会发出<code>pre_save</code>和<code>post_save</code>信号，字段的<code>auto_now</code>也不会起作用</p>
<p>一对多关联对象访问会缓存<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>e = Entry.objects.get(id=<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(e.blog)  <span class="comment"># Hits the database to retrieve the associated Blog.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(e.blog)  <span class="comment"># Doesn't hit the database; uses cached version.</span></div></pre></td></tr></table></figure></p>
<p>自定义反向管理器1.7+<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entry</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="comment">#...</span></div><div class="line">    objects = models.Manager()  <span class="comment"># Default Manager</span></div><div class="line">    entries = EntryManager()    <span class="comment"># Custom Manager</span></div><div class="line"> </div><div class="line">b = Blog.objects.get(id=<span class="number">1</span>)</div><div class="line">b.entry_set(manager=<span class="string">'entries'</span>).all()</div></pre></td></tr></table></figure></p>
<h2 id="查询集API-参考"><a href="#查询集API-参考" class="headerlink" title="查询集API 参考"></a><a href="http://python.usyiyi.cn/django/ref/models/querysets.html" target="_blank" rel="external">查询集API 参考</a></h2><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a><a href="http://python.usyiyi.cn/django/topics/db/aggregation.html" target="_blank" rel="external">聚合</a></h2><p>一次创建多条数据（只有一条sql）<br><code>bulk_create</code></p>
<p>根据提供的一组<code>pk</code>查询出所有对应的对象<br><code>in_bulk</code></p>
<p>在查作者列表时要查每个作者有几篇博文<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>authors = Author.object.all().annotate(Count(<span class="string">'blog'</span>))</div><div class="line"><span class="comment"># authors[0]作者的博文数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>authors[<span class="number">0</span>].blog__count</div><div class="line"><span class="number">3</span></div><div class="line"><span class="comment"># 或</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>authors = Author.object.all().annotate(number_of_blog=Count(<span class="string">'blog'</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>authors[<span class="number">0</span>].number_of_blog</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>算出所有作者的年龄总合（不需要其它数据）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>ageAuthor.objects.all().aggregate(Sum(<span class="string">'age'</span>))</div><div class="line">&#123;<span class="string">'age__sum'</span>: <span class="number">26</span>&#125;</div></pre></td></tr></table></figure></p>
<p><del><code>annotate</code>和</del><code>aggregate</code>都可写入多个注解表达式<br><code>annotate</code>和<code>aggregate</code>可聚合关联对象</p>
<p>对注解进行过滤<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查询出作者数大于1的书本</span></div><div class="line"><span class="comment"># 只有一条sql</span></div><div class="line">Book.objects.annotate(num_authors=Count(<span class="string">'authors'</span>)).filter(num_authors__gt=<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>但顺序不一样，结果也不同，如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Publisher.objects.annotate(num_books=Count(<span class="string">'book'</span>)).filter(book__rating__gt=<span class="number">3.0</span>)</div><div class="line">Publisher.objects.filter(book__rating__gt=<span class="number">3.0</span>).annotate(num_books=Count(<span class="string">'book'</span>))</div></pre></td></tr></table></figure></p>
<p>对注解项进行排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Book.objects.annotate(num_authors=Count(<span class="string">'authors'</span>)).order_by(<span class="string">'num_authors'</span>)</div></pre></td></tr></table></figure></p>
<p><code>values()</code>使用注解时要小心，如果<code>values()</code>在注解之前，会对结果进行分组，注解会作用在分组上而不是整个查询集上</p>
<blockquote>
<p>与默认排序交换或order_by()¶</p>
<p>在查询集中的order_by() 部分(或是在模型中默认定义的排序项) 会在选择输出数据时被用到，即使这些字段没有在 values() 调用中被指定。这些额外的字段可以将相似的数据行分在一起，也可以让相同的数据行相分离。在做计数时，  就会表现地格外明显：</p>
<p>通过例子中的方法，假设有一个这样的模型：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">10</span>)</div><div class="line">    data = models.IntegerField() </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        ordering = [<span class="string">"name"</span>]</div></pre></td></tr></table></figure>
<blockquote>
<p>关键的部分就是在模型默认排序项中设置的name字段。如果你想知道每个非重复的data值出现的次数，可以这样写：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Warning: not quite correct!</span></div><div class="line">Item.objects.values(<span class="string">"data"</span>).annotate(Count(<span class="string">"id"</span>))</div></pre></td></tr></table></figure>
<blockquote>
<p>…这部分代码想通过使用它们公共的 data 值来分组 Item对象，然后在每个分组中得到  id 值的总数。但是上面那样做是行不通的。这是因为默认排序项中的 name也是一个分组项，所以这个查询会根据非重复的 (data, name) 进行分组，而这并不是你本来想要的结果。所以，你应该这样改写：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Item.objects.values(<span class="string">"data"</span>).annotate(Count(<span class="string">"id"</span>)).order_by()</div></pre></td></tr></table></figure>
<blockquote>
<p>…这样就清空了查询中的所有排序项。 你也可以在其中使用 data ，这样并不会有副作用，这是因为查询分组中只有这么一个角色了。</p>
<p>这个行为与查询集文档中提到的 distinct() 一样，而且生成规则也一样：一般情况下，你不想在结果中由额外的字段扮演这个角色，那就清空排序项，或是至少保证它仅能访问 values()中的字段。</p>
</blockquote>
<h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p><a href="http://python.usyiyi.cn/django/intro/tutorial06.html" target="_blank" rel="external">http://python.usyiyi.cn/django/intro/tutorial06.html</a><br><a href="http://python.usyiyi.cn/django/ref/templates/builtins.html" target="_blank" rel="external">http://python.usyiyi.cn/django/ref/templates/builtins.html</a> </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;% load static %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"&#123;% static user_stylesheet %&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"&#123;% static 'polls/style.css' %&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"&#123;% get_static_prefix %&#125;pools/style.css"</span> /&gt;</span></div><div class="line">&#123;% get_static_prefix as STATIC_PREFIX %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; STATIC_PREFIX &#125;&#125;pools/style.css"</span> /&gt;</span></div><div class="line">&#123;% static "images/hi.jpg" as myphoto %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; myphoto &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></div></pre></td></tr></table></figure>
<p>还有<code>get_media_prefix</code></p>
<h2 id="模型实例参考"><a href="#模型实例参考" class="headerlink" title="模型实例参考"></a><a href="http://python.usyiyi.cn/django/ref/models/instances.html#django.db.models.Model" target="_blank" rel="external">模型实例参考</a></h2><p>从数据库中重新加载值<br><code>Model.refresh_from_db(using=None, fields=None, **kwargs)</code></p>
<p>返回模型中当前所有延迟字段的属性名称<br><code>Model.get_deferred_fields()</code></p>
<p>验证对象</p>
<blockquote>
<p>字段的基本验证会最先跑，但不管前面运行是否通过，对于每个字段，如果Field.clean() 方法抛出 ValidationError，那么将不会调用该字段对应的clean_<fieldname>()方法。 但是，剩余的字段的验证方法仍然会执行。<br>先跑<code>form</code>里验证，再跑<code>modle</code>验证<br>先跑验证器，再跑<code>clean</code><br>先跑单个字段验证，再跑整体验证<br><code>Model.clean_field()</code>会覆盖<code>Model</code>里所有字段的验证器，但不会对<code>Form</code>里的验证器产生影响</fieldname></p>
</blockquote>
<p>验证模型的字段<code>Model.clean_fields(exclude=None)</code><br>验证模型的完整性<code>Model.clean()</code><br>验证模型的唯一性<code>Model.validate_unique(exclude=None)</code><br>调用<code>full_clean()</code>时，上面三个方法都会执行（执行顺序即上面的书写顺序），<code>ModelForm</code>的<code>is_valid()</code>也会执行上所有验证<br><code>Model.full_clean(exclude=None, validate_unique=True)</code><br> <code>save()</code>时，<code>full_clean()</code>不会被调用，如果想验证数据，可手动调用</p>
<p><code>Model.clean()</code>时，引发特定字段的异常<br>使用一个字典实例化<code>ValidationError</code>即可或使用<code>add_error(field, msg)</code>方法</p>
<p>在数据库字段值的基础上进行简单的算法操作，应该尽量使用<code>F()</code>表达式，避免问题竞态条件</p>
<blockquote>
<p>指定要保存的字段</p>
<p>如果传递给save() 的update_fields 关键字参数一个字段名称列表，那么将只有该列表中的字段会被更新。如果你想更新对象的一个或几个字段，这可能是你想要的。不让模型的所有字段都更新将会带来一些轻微的性能提升。例如：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">product.name = <span class="string">'Name changed again'</span></div><div class="line">product.save(update_fields=[<span class="string">'name'</span>])</div></pre></td></tr></table></figure>
<blockquote>
<p><code>update_fields</code> 参数可以是任何包含字符串的可迭代对象。空的<code>update_fields</code>可迭代对象将会忽略保存。如果为<code>None</code>值，将执行所有字段上的更新。</p>
<p>指定<code>update_fields</code>将强制使用更新操作。</p>
<p>当保存通过延迟模型加载（<code>only()</code> 或<code>defer()</code>）进行访问的模型时，只有从数据库中加载的字段才会得到更新。这种情况下，有个自动的<code>update_fields</code>。如果你赋值或者改变延迟字段的值，该字段将会添加到更新的字段中。</p>
</blockquote>
<p>new in 1.9<br>使用<code>Model.delete()</code>删除多表继承的子表数据时，使用<code>`keep_parents=True</code>可以保留上级数据，默认为<code>False</code><br>返回值为删除数据的条数</p>
<p><code>DateField</code>和<code>DateTimeField</code>字段如果<code>null=False</code>则支持下面两个方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Model.get_next_by_FOO(**kwargs)¶ </div><div class="line">Model.get_previous_by_FOO(**kwargs)</div></pre></td></tr></table></figure></p>
<h2 id="管理器"><a href="#管理器" class="headerlink" title="管理器"></a><a href="http://python.usyiyi.cn/django/topics/db/managers.html" target="_blank" rel="external">管理器</a></h2><p>django遇到的第一个管理器为默认管理器</p>
<p>如果需要访问关联对象调用关联对象的默认管理器，需要在管理器中加<code>use_for_related_fields=True</code>，不然会调用朴素管理器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultManager</span><span class="params">(models.Manager)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></div><div class="line">        queryset = super(DefaultManager, self).get_quertset().filter(is_delete=<span class="keyword">False</span>)</div><div class="line">        <span class="keyword">return</span> queryset</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">100</span>)</div><div class="line">    is_delete = models.BooleanField()</div><div class="line">    objects = DefaultManager()</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span><span class="params">(models.Model)</span>:</span></div><div class="line">    author = models.ForeignKey(Author)</div><div class="line">    title = models.CharField(max_length=<span class="number">100</span>)</div><div class="line">    content = models.TextField()</div><div class="line">    is_delete = models.BooleanField()</div><div class="line">    objects = DefaultManager()</div><div class="line"> </div><div class="line"> </div><div class="line">author = Author.objects.get(pk=<span class="number">1</span>)</div><div class="line">post = Post.objects.get(pk=<span class="number">2</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 调用DefaultManager管理器</span></div><div class="line">author.post_set.all()</div><div class="line"><span class="comment"># 调用朴素管理器，如果要调用DefaultManager管理器，需要设置DefaultManager管理器的类变量use_for_related_fields=True</span></div><div class="line">post.author</div></pre></td></tr></table></figure></p>
<p><em>注：朴素管理器里找不到的方法会在默认管理器里查找</em></p>
<p><a href="http://python.usyiyi.cn/django/topics/db/managers.html#calling-custom-queryset-methods-from-the-manager" target="_blank" rel="external">从Manager中调用自定义的QuerySet</a></p>
<h2 id="进行原始的SQL查询"><a href="#进行原始的SQL查询" class="headerlink" title="进行原始的SQL查询"></a><a href="http://python.usyiyi.cn/django/topics/db/sql.html" target="_blank" rel="external">进行原始的SQL查询</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Manager.raw(raw_query, params=<span class="keyword">None</span>, translations=<span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>django.db.connection对象提供了常规数据库连接的方式。为了使用数据库连接，先要调用connection.cursor()方法来获取一个游标对象之后，调用cursor.execute(sql, [params])来执行sql语句，调用cursor.fetchone()或者cursor.fetchall()来返回结果行。</p>
</blockquote>
<h2 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a><a href="http://python.usyiyi.cn/django/topics/db/transactions.html" target="_blank" rel="external">数据库事务</a></h2><p>详细笔记见django1.8事务.md</p>
<p>将每个HTTP请求封装在一个数据库事务中<br>settings中设置<code>ATOMIC_REQUESTS=True</code></p>
<p>单独给一个方法加上数据库事务控制使用<code>atomic</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</div><div class="line"> </div><div class="line"><span class="meta">@transaction.atomic</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">viewfunc</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="comment"># This code executes inside a transaction.</span></div><div class="line">    do_stuff()</div></pre></td></tr></table></figure></p>
<p>或<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">viewfunc</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="comment"># This code executes in autocommit mode (Django's default).</span></div><div class="line">    do_stuff()</div><div class="line"> </div><div class="line">    <span class="keyword">with</span> transaction.atomic():</div><div class="line">        <span class="comment"># This code executes inside a transaction.</span></div><div class="line">        do_more_stuff()</div></pre></td></tr></table></figure></p>
<p>避免在 atomic里捕获异常!</p>
<h2 id="查询表达式"><a href="#查询表达式" class="headerlink" title="查询表达式"></a>查询表达式</h2><p>使用数据库的方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Func, F </div><div class="line">queryset.annotate(field_lower=Func(F(<span class="string">'field'</span>), function=<span class="string">'LOWER'</span>))</div></pre></td></tr></table></figure></p>
<p>或<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lower</span><span class="params">(Func)</span>:</span></div><div class="line">    function = <span class="string">'LOWER'</span> </div><div class="line">queryset.annotate(field_lower=Lower(F(<span class="string">'field'</span>)))</div></pre></td></tr></table></figure></p>
<h2 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a><a href="http://python.usyiyi.cn/django/ref/models/conditional-expressions.html" target="_blank" rel="external">条件表达式</a></h2><p>高级用法查看在线版<br><code>When</code><br><code>Case</code></p>
<h2 id="数据库函数"><a href="#数据库函数" class="headerlink" title="数据库函数"></a><a href="http://python.usyiyi.cn/django/ref/models/database-functions.html" target="_blank" rel="external">数据库函数</a></h2><p><code>Coalesce</code> 接收一个含有至少两个字段名称或表达式的列表，返回第一个非空的值（空字符串不认为是一个空值）</p>
<h2 id="将遗留数据库整合到Django"><a href="#将遗留数据库整合到Django" class="headerlink" title="将遗留数据库整合到Django"></a><a href="http://python.usyiyi.cn/django/howto/legacy-databases.html" target="_blank" rel="external">将遗留数据库整合到Django</a></h2><p>根据遗留数据库生成models<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py inspectdb &gt; models.py</div></pre></td></tr></table></figure></p>
<h2 id="为模型提供初始数据"><a href="#为模型提供初始数据" class="headerlink" title="为模型提供初始数据"></a><a href="http://python.usyiyi.cn/django/howto/initial-data.html" target="_blank" rel="external">为模型提供初始数据</a></h2><p>使用fixtures<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">    &quot;model&quot;: &quot;myapp.person&quot;,</div><div class="line">    &quot;pk&quot;: 1,</div><div class="line">    &quot;fields&quot;: &#123;</div><div class="line">      &quot;first_name&quot;: &quot;John&quot;,</div><div class="line">      &quot;last_name&quot;: &quot;Lennon&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    &quot;model&quot;: &quot;myapp.person&quot;,</div><div class="line">    &quot;pk&quot;: 2,</div><div class="line">    &quot;fields&quot;: &#123;</div><div class="line">      &quot;first_name&quot;: &quot;Paul&quot;,</div><div class="line">      &quot;last_name&quot;: &quot;McCartney&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>导入数据命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py loaddata &lt;fixturename&gt;</div></pre></td></tr></table></figure></p>
<h2 id="数据库访问优化"><a href="#数据库访问优化" class="headerlink" title="数据库访问优化"></a>数据库访问优化</h2><p>添加索引，比任何查询语法优化都来的重要<br>理解查询集<br>QuerySets是延迟的。<br>什么时候它们被计算出来。<br>数据在内存中如何存储。</p>
<p>使用<code>cached_property</code>装饰器，只要是同一个实例，一个方法就只会执行一次<br>使用<code>with</code>模版标签<br>使用<code>iterator</code>迭代器</p>
<p>在数据库中而不是python中做数据库工作<br>使用过滤器和反射过滤器对数据进行过滤<br>使用<code>F()</code>表达式<br>使用注解和聚合<br>使用原始SQL</p>
<p>用唯一的或被索引的列来检索独立对象</p>
<p>在不同位置多次访问数据库，每次获取一个数据集，不如在一次查询中获取它们。比如循环的时候。</p>
<p>使用<code>select_related()</code>和<code>prefetch_related()</code></p>
<p>不检索你不需要的信息<br>使用<code>QuerySet.values()</code>和<code>QuerySet.values_list()</code></p>
<p>使用<code>QuerySet.defer()</code>和<code>QuerySet.only()</code></p>
<p>计算数量不要使用<code>len(queryset)</code>而是使用<code>QuerySet.count()</code></p>
<p>判断是否存在结果使用<code>QuerySet.exists()</code>而不是用<code>if queryset</code></p>
<p>但不要过度使用<code>count()</code>和<code>exists()</code>，如果你本来就需要里面的数据，那就不要使用</p>
<p>使用<code>QuerySet.update()</code>和<code>QuerySet.delete()</code>批量操作数据</p>
<p>直接使用外键的值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">entry.blog_id</div><div class="line"><span class="comment"># 而不是</span></div><div class="line">entry.blog.id</div></pre></td></tr></table></figure></p>
<p>如果你并在意结果集的顺序，不要进行排序，移除<code>Meta.ordering</code></p>
<p>创建对象时尽可能使用<code>bulk_create()</code>来减少sql查询数量<br>这也适用于<code>ManyToManyFields</code>的情况，一起<code>add</code>而不是一个一个<code>add</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">my_band.members.add(me, my_friend) </div><div class="line"><span class="comment">#更优于 </span></div><div class="line">my_band.members.add(me)</div><div class="line">my_band.members.add(my_friend)</div></pre></td></tr></table></figure></p>
<h2 id="URL调度器"><a href="#URL调度器" class="headerlink" title="URL调度器"></a><a href="http://python.usyiyi.cn/django/topics/http/urls.html" target="_blank" rel="external">URL调度器</a></h2><p>url捕获的参数永远是字符串</p>
<p>在根url上获取的参数不影响参数传递<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># In settings/urls/main.py</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</div><div class="line"> </div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^(?P&lt;username&gt;\w+)/blog/'</span>, include(<span class="string">'foo.urls.blog'</span>)),</div><div class="line">]</div><div class="line"> </div><div class="line"><span class="comment"># In foo/urls/blog.py</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</div><div class="line"> </div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^$'</span>, views.blog.index),</div><div class="line">    url(<span class="string">r'^archive/$'</span>, views.blog.archive),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>在上面的例子中，捕获的”username”变量将被如期传递给include()指向的URLconf。</p>
<p>可嵌套<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"> </div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'blog/(page-(\d+)/)?$'</span>, blog_articles),                  <span class="comment"># bad</span></div><div class="line">    url(<span class="string">r'comments/(?:page-(?P&lt;page_number&gt;\d+)/)?$'</span>, comments),  <span class="comment"># good</span></div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>传递额外的参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</div><div class="line"> </div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^blog/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$'</span>, views.year_archive, &#123;<span class="string">'foo'</span>: <span class="string">'bar'</span>&#125;),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>当url捕获的参数和字典中传递的参数同名时，将忽略url捕获的参数而使用字典里的参数值</p>
<p>传递额外的参数给<code>include()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># main.py</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</div><div class="line"> </div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^blog/'</span>, include(<span class="string">'inner'</span>), &#123;<span class="string">'blogid'</span>: <span class="number">3</span>&#125;),</div><div class="line">]</div><div class="line"> </div><div class="line"><span class="comment"># inner.py</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"><span class="keyword">from</span> mysite <span class="keyword">import</span> views</div><div class="line"> </div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^archive/$'</span>, views.archive),</div><div class="line">    url(<span class="string">r'^about/$'</span>, views.about),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>效果等同<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># main.py</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</div><div class="line"><span class="keyword">from</span> mysite <span class="keyword">import</span> views</div><div class="line"> </div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^blog/'</span>, include(<span class="string">'inner'</span>)),</div><div class="line">]</div><div class="line"> </div><div class="line"><span class="comment"># inner.py</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"> </div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^archive/$'</span>, views.archive, &#123;<span class="string">'blogid'</span>: <span class="number">3</span>&#125;),</div><div class="line">    url(<span class="string">r'^about/$'</span>, views.about, &#123;<span class="string">'blogid'</span>: <span class="number">3</span>&#125;),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><a href="http://python.usyiyi.cn/django/topics/http/urls.html#reversing-namespaced-urls" target="_blank" rel="external">反查带命名空间的URL</a></p>
<h2 id="编写视图"><a href="#编写视图" class="headerlink" title="编写视图"></a><a href="http://python.usyiyi.cn/django/topics/http/views.html" target="_blank" rel="external">编写视图</a></h2><p><code>HttpResponse</code>子类，状态码</p>
<ul>
<li><code>HttpResponseRedirect</code> 临时重定向，302</li>
<li><code>HttpResponsePermanentRedirect</code> 永久重定向，301</li>
<li><code>HttpResponseNotModified</code> 没有任何修改，304</li>
<li><code>HttpResponseBadRequest</code> 语义有误码，当前请求不被服务器理解，400</li>
<li><code>HttpResponseNotFound</code> 页面没找到，404</li>
<li><code>HttpResponseForbidden</code> 服务器理解请求，但拒绝执行，403</li>
<li><code>HttpResponseNotAllowed</code> 请求中指定的请求方式不能用于请求相应资源，405</li>
<li><code>HttpResponseGone</code> 请求的资源在服务器上已经不可用，而且没有已知的转发地址，410</li>
<li><code>HttpResponseServerError</code> 服务器遇到了一个意外的错误，导致无法完成对请求的处理，500</li>
<li><code>HttpResponse(status=201)</code> 自定义返回状态码</li>
</ul>
<p>重写错误视图（在url中）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">handler404 = &apos;mysite.views.my_custom_page_not_found_view&apos;</div><div class="line">handler500 = &apos;mysite.views.my_custom_error_view&apos; </div><div class="line">handler403 = &apos;mysite.views.my_custom_permission_denied_view&apos;</div><div class="line">handler400 = &apos;mysite.views.my_custom_bad_request_view&apos;</div></pre></td></tr></table></figure></p>
<h2 id="Django-的快捷函数"><a href="#Django-的快捷函数" class="headerlink" title="Django 的快捷函数"></a><a href="http://python.usyiyi.cn/django/topics/http/shortcuts.html" target="_blank" rel="external">Django 的快捷函数</a></h2><p><code>template_name</code>可传一个模版序列，django将使用存在的第一个模版</p>
<p><code>redirect(to, [permanent=False, ]*args, **kwargs)[source]</code></p>
<blockquote>
<p>为传递进来的参数返回HttpResponseRedirect 给正确的URL 。<br>参数可以是：</p>
<pre><code>一个模型：将调用模型的get_absolute_url() 函数
一个视图，可以带有参数：将使用urlresolvers.reverse 来反向解析名称
一个绝对的或相对的URL，将原样作为重定向的位置。
</code></pre><p>默认返回一个临时的重定向；传递permanent=True 可以返回一个永久的重定向。</p>
</blockquote>
<p><code>get_object_or_404(klass, *args, **kwargs)</code>可以传Model也可以传QuerySet实例和关联的管理器<br><code>get_list_or_404(klass, *args, **kwargs)</code>可以传Model也可以传QuerySet实例和关联的管理器</p>
<h2 id="视图装饰器"><a href="#视图装饰器" class="headerlink" title="视图装饰器"></a><a href="http://python.usyiyi.cn/django/topics/http/decorators.html" target="_blank" rel="external">视图装饰器</a></h2><p><a href="http://python.usyiyi.cn/django/topics/conditional-view-processing.html" target="_blank" rel="external">按需内容处理</a><br><code>django.views.decorators.http</code>包里的装饰器可以基于请求的方法来限制对视图的访问。若条件不满足会返回 django.http.HttpResponseNotAllowed。<br><code>require_http_methods(request_method_list)</code>限制视图只能服务于规定的http方法（需要大写）<br><code>require_GET()</code><br><code>require_POST()</code><br><code>require_safe()</code>只允许视图接受GET和HEAD方法的装饰器。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@condition(etag_func=None, last_modified_func=None)</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@last_modified(last_modified_func)</span></div></pre></td></tr></table></figure>
<p>根据最后修改时间来决定是否运行视图，可减少流量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@etag(etag_func)</span></div></pre></td></tr></table></figure></p>
<p><code>etag</code>（版本？）和<code>last_modified</code>不能同时使用</p>
<p><code>GZip</code>对内容进行压缩，节省流量，但增加处理时间</p>
<p><code>vary_on_cookie</code><br><code>vary_on_headers</code><br>基于特定的请求头部来控制缓存</p>
<p><code>never_cache</code></p>
<h2 id="Request-对象和Response-对象"><a href="#Request-对象和Response-对象" class="headerlink" title="Request 对象和Response 对象"></a><a href="http://python.usyiyi.cn/django/ref/request-response.html" target="_blank" rel="external">Request 对象和Response 对象</a></h2><p><code>HttpRequest</code>对象(除非特殊说明，所有属性都是只读，<code>session</code>属性是个例外)<br><code>HttpRequest.scheme</code> 请求方案（通常为http或https）<br><code>HttpRequest.body</code> 字节字符串，表示原始http请求正文<br><code>HttpRequest.path</code> 字符串，表示请求的页面的完整路径，不包含域名<br><code>HttpRequest.path_info</code>    在某些Web 服务器配置下，主机名后的URL 部分被分成脚本前缀部分和路径信息部分。path_info 属性将始终包含路径信息部分，不论使用的Web 服务器是什么。使用它代替path 可以让代码在测试和开发环境中更容易地切换。<br>    例如，如果应用的WSGIScriptAlias 设置为”/minfo”，那么当path 是”/minfo/music/bands/the_beatles/“ 时path_info 将是”/music/bands/the_beatles/“。<br><code>HttpRequest.method</code> 请求使用的http方法，大写<br><code>HttpRequest.encoding</code> 表示提交的数据的编码方式，可写<br><code>HttpRequest.GET</code><br><code>HttpRequest.POST</code><br><code>HttpRequest.REQUEST</code>不建议使用，使用<code>GET</code>和<code>POST</code>代替<br><code>HttpRequest.COOKIES</code> 字典，键和值都是字符串<br><code>HttpRequest.FILES</code> 类似字典的对象，包含所有的上传文件，<form>带有<code>enctype=&quot;multipart/form-data&quot;</code>才会有数据<br><code>HttpRequest.META</code> 标准的python字典，包含所有http请求头部<br><code>HttpRequest.user</code><br><code>HttpRequest.session</code> 类似字典的对象<br><code>HttpRequest.urlconf</code> 如果其它地方设置了，则用来取代<code>ROOT_URLCONF</code><br><code>HttpRequest.resolver_match</code> 会在url解析之后设置，一个<code>ResolverMatch</code>实例，表示解析之后的url<br><code>HttpRequest.get_host()</code> 获取原始主机地址<br><code>HttpRequest.get_port()</code> 获取请求端端口号<br><code>HttpRequest.get_full_path()</code> 返回完整的path，包括查询字符串<br><code>HttpRequest.build_absolute_uri(location)</code> 返回绝对url<br><code>HttpRequest.get_signed_cookie(key, default=RAISE_ERROR, salt=&#39;&#39;, max_age=None)</code> 返回签名过的Cookie对应的值<br><code>HttpRequest.is_secure()</code> 如果请求是通过https发起的，则返回True<br><code>HttpRequest.is_ajax()</code> 如果请求是通过XMLHttpRequest发起的，则返回True<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HttpRequest.read(size=<span class="keyword">None</span>)</div><div class="line">HttpRequest.readline()</div><div class="line">HttpRequest.readlines()</div><div class="line">HttpRequest.xreadlines()</div><div class="line">HttpRequest.__iter__()</div></pre></td></tr></table></figure></form></p>
<p>这几个方法实现类文件的接口用于读取HttpRequest· 实例</p>
<p><code>QueryDict</code>对象<br>request.POST 和request.GET 的QueryDict 在一个正常的请求/响应循环中是不可变的。若要获得可变的版本，需要使用.copy()。</p>
<h2 id="TemplateResponse-和SimpleTemplateResponse"><a href="#TemplateResponse-和SimpleTemplateResponse" class="headerlink" title="TemplateResponse 和SimpleTemplateResponse"></a><a href="http://python.usyiyi.cn/django/ref/template-response.html" target="_blank" rel="external">TemplateResponse 和SimpleTemplateResponse</a></h2><p><code>SimpleTemplateResponse</code><br><code>TemplateResponse</code><br>TemplateResponse 对象和普通的django.http.HttpResponse 一样可以用于任何地方。它可以用来作为render() 和render_to_response() 的另外一种选择。</p>
<p>例如，下面这个简单的视图使用一个简单模板和包含查询集的上下文返回一个TemplateResponse：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.template.response <span class="keyword">import</span> TemplateResponse</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">blog_index</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">return</span> TemplateResponse(request, <span class="string">'entry_list.html'</span>, &#123;<span class="string">'entries'</span>: Entry.objects.all()&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a><a href="http://python.usyiyi.cn/django/topics/http/file-uploads.html" target="_blank" rel="external">文件上传</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_uploaded_file</span><span class="params">(f)</span>:</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'some/file/name.txt'</span>, <span class="string">'wb+'</span>) <span class="keyword">as</span> destination:</div><div class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> f.chunks():</div><div class="line">            destination.write(chunk)</div></pre></td></tr></table></figure>
<p>遍历UploadedFile.chunks()，而不是使用read()，能确保大文件并不会占用系统过多的内存。</p>
<p>上传处理器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(&quot;django.core.files.uploadhandler.MemoryFileUploadHandler&quot;,</div><div class="line">&quot;django.core.files.uploadhandler.TemporaryFileUploadHandler&quot;,)</div></pre></td></tr></table></figure></p>
<p>MemoryFileUploadHandler 和TemporaryFileUploadHandler一起提供了Django的默认文件上传行为，将小文件读取到内存中，大文件放置在磁盘中。</p>
<p>你可以编写自定义的处理器，来定制Django如何处理文件。例如，你可以使用自定义处理器来限制用户级别的配额，在运行中压缩数据，渲染进度条，甚至是向另一个储存位置直接发送数据，而不把它存到本地。关于如何自定义或者完全替换处理器的行为，详见编写自定义的上传处理器。</p>
<p>更改上传处理器的行为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">DEFAULT_FILE_STORAGE</div><div class="line">FILE_CHARSET</div><div class="line">FILE_UPLOAD_HANDLERS</div><div class="line">FILE_UPLOAD_MAX_MEMORY_SIZE</div><div class="line">FILE_UPLOAD_PERMISSIONS</div><div class="line">FILE_UPLOAD_TEMP_DIR</div><div class="line">MEDIA_ROOT</div><div class="line">MEDIA_URL</div></pre></td></tr></table></figure></p>
<p>在运行中更改上传处理器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">request.upload_handlers.insert(0, ProgressBarUploadHandler())</div></pre></td></tr></table></figure></p>
<blockquote>
<p> 注意</p>
<p> 你只可以在访问request.POST或者request.FILES之前修改上传处理器– 在上传处理工作执行之后再修改上传处理就毫无意义了。如果你在读取request.FILES之后尝试修改request.upload_handlers，Django会抛出异常。</p>
<p> 所以，你应该在你的视图中尽早修改上传处理器。</p>
<p> CsrfViewMiddleware 也会访问request.POST，它是默认开启的。意思是你需要在你的视图中使用csrf_exempt()，来允许你修改上传处理器。接下来在真正处理请求的函数中，需要使用csrf_protect()。注意这意味着处理器可能会在CSRF验证完成之前开始接收上传文件。例如：</p>
<figure class="highlight plain"><figcaption><span>django.views.decorators.csrf import csrf_exempt, csrf_protect </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@csrf_exempt</div><div class="line">def upload_file_view(request):</div><div class="line">    request.upload_handlers.insert(0, ProgressBarUploadHandler())</div><div class="line">    return _upload_file_view(request) </div><div class="line">@csrf_protect</div><div class="line">def _upload_file_view(request):</div><div class="line">    ... # Process request</div></pre></td></tr></table></figure>
</blockquote>
<h2 id="File对象"><a href="#File对象" class="headerlink" title="File对象"></a><a href="http://python.usyiyi.cn/django/ref/files/file.html" target="_blank" rel="external">File对象</a></h2><p><code>File</code>类<br><code>ContentFile</code>类<br><code>ImageFile</code>类 比<code>File</code>多了<code>width</code>和<code>height</code>属性<br>附加到对象的文件有额外的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">File.save(name, content[, save=True])</div></pre></td></tr></table></figure></p>
<p>提供文件名和内容保存一个新文件，不会替换已存在文件，但会创建一个新文件，并且更新对象来指向它。<br>测试出来直接<code>car.save()</code>也不会覆盖已存在文件，如果有重写会在原有名字后面加字符串<br>如果save为True，模型的save()方法会在文件保存之后调用。这就是说，下面两行：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>car.photo.save(<span class="string">'myphoto.jpg'</span>, content, save=<span class="keyword">False</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>car.save()</div><div class="line">``` </div><div class="line">等价于：</div><div class="line">```python</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>car.photo.save(<span class="string">'myphoto.jpg'</span>, content, save=<span class="keyword">True</span>)</div></pre></td></tr></table></figure></p>
<p>从模型实例中移除文件，并且删除内部文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">File.delete([save=True])</div></pre></td></tr></table></figure></p>
<p>在页面展示中，<code>ImageFile</code>自带的清除勾选框勾选后只是清除了数据库中这具字段的值，并不会删除文件系统里对应的文件，而<code>File.delete()</code>会删除文件系统里的文件</p>
<h2 id="文件储存API"><a href="#文件储存API" class="headerlink" title="文件储存API"></a><a href="http://python.usyiyi.cn/django/ref/files/storage.html" target="_blank" rel="external">文件储存API</a></h2><p><code>DefaultStorage</code><br><code>FileSystemStorage</code><br><code>Storage</code></p>
<h2 id="管理文件"><a href="#管理文件" class="headerlink" title="管理文件"></a><a href="http://python.usyiyi.cn/django/topics/files.html" target="_blank" rel="external">管理文件</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">255</span>)</div><div class="line">    price = models.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)</div><div class="line">    photo = models.ImageField(upload_to=<span class="string">'cars'</span>)</div></pre></td></tr></table></figure>
<p><code>photo</code>有以下方法<br><code>photo.path</code>相对路径<br><code>photo.url</code>绝对路径</p>
<p><em>实际测试有出入</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 官方示例</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>car.photo.path</div><div class="line"><span class="string">'/media/cars/chevy.jpg'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>car.photo.url</div><div class="line"><span class="string">'http://media.example.com/cars/chevy.jpg'</span></div><div class="line"></div><div class="line"><span class="comment"># 实际测试结果</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>car.photo.path</div><div class="line"><span class="string">'E:\workspace\parking\parking\upload\20151230171832_0.jpg'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>car.photo.url</div><div class="line"><span class="string">'/upload/20151230171832_0.jpg'</span></div></pre></td></tr></table></figure></p>
<p>更改一个文件的存储位置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>initial_path = car.photo.path</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>car.photo.name = <span class="string">'cars/chevy_ii.jpg'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>new_path = settings.MEDIA_ROOT + car.photo.name</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Move the file on the filesystem</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.rename(initial_path, new_path)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>car.save()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>car.photo.path</div><div class="line"><span class="string">'/media/cars/chevy_ii.jpg'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>car.photo.path == new_path</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<h2 id="编写自定义存储系统"><a href="#编写自定义存储系统" class="headerlink" title="编写自定义存储系统"></a><a href="http://python.usyiyi.cn/django/howto/custom-file-storage.html" target="_blank" rel="external">编写自定义存储系统</a></h2><ol>
<li>必须是<code>django.core.files.storage.Storage</code>的子类</li>
<li>Django必须能够不带任何参数来实例化</li>
<li>必须实现 _open() 和 _save()方法，以及任何适合于你的储存类的其它方法</li>
<li>你的储存类必须是 可以析构的，所以它在迁移中的一个字段上使用的时候可以被序列化。只要你的字段拥有自己可以序列化的参数，你就可以为它使用django.utils.deconstruct.deconstructible类装饰器（这也是Django用在FileSystemStorage上的东西）</li>
</ol>
<h2 id="基于类的视图"><a href="#基于类的视图" class="headerlink" title="基于类的视图"></a><a href="http://python.usyiyi.cn/django/topics/class-based-views/index.html" target="_blank" rel="external">基于类的视图</a></h2><h2 id="基于类的内建通用视图"><a href="#基于类的内建通用视图" class="headerlink" title="基于类的内建通用视图"></a><a href="http://python.usyiyi.cn/django/topics/class-based-views/generic-display.html" target="_blank" rel="external">基于类的内建通用视图</a></h2><p><code>ListView</code>类视图中，默认的对象列表名除了<code>object_list</code>，还有一个<code>&lt;model_name&gt;_list</code></p>
<h2 id="使用基于类的视图处理表单"><a href="#使用基于类的视图处理表单" class="headerlink" title="使用基于类的视图处理表单"></a><a href="http://python.usyiyi.cn/django/topics/class-based-views/generic-editing.html" target="_blank" rel="external">使用基于类的视图处理表单</a></h2><p>如果对应模型存在<code>get_absolute_url</code>方法的前提下<code>CreateView</code>和<code>UpdateView</code>类视图的<code>success_url</code>默认使用<code>get_absolute_url</code></p>
<p>如何定义<code>form_class</code>，即使<code>form_class</code>是<code>ModelForm</code>也还是需要指定模型</p>
<p>如果没有定义<code>form_class</code>，则必须定义<code>fields</code>，<code>fields</code>和<code>form_class</code>不能同时存在</p>
<p>如果模型某个字段存的是模板路径，并且想通过此字段来动态的控制表单页的模板，可通过<code>template_name_field</code>来指定此字段。</p>
<h2 id="Mixin"><a href="#Mixin" class="headerlink" title="Mixin"></a><a href="http://python.usyiyi.cn/django/topics/class-based-views/mixins.html" target="_blank" rel="external">Mixin</a></h2><h2 id="基于类的视图的Mixin"><a href="#基于类的视图的Mixin" class="headerlink" title="基于类的视图的Mixin"></a><a href="http://python.usyiyi.cn/django/ref/class-based-views/mixins.html" target="_blank" rel="external">基于类的视图的Mixin</a></h2><p><code>ContextMixin</code>所有基于类的通用视图的这个模板Context 都包含一个view 变量指向视图实例。</p>
<blockquote>
<p>Use alters_data where appropriate<br>注意，将视图实例包含在模板Context 中可能将有潜在危险的方法暴露给模板作者。为了避免在模板中被调用类似这样的方法，可以在这些方法上设置alters_data=True。更多信息，参见渲染模板Context 的文档。<br>很显然，调用某些变量会带来副作用，允许模板系统访问它们将是愚蠢的还会带来安全漏洞。<br>    每个Django 模型对象的delete() 方法就是一个很好的例子。模板系统不应该允许下面的行为：<br>    I will now delete this valuable data. <br>    设置可调用变量的alters_data 属性可以避免这点。如果变量设置alters_data=True ，模板系统将不会调用它，而会无条件使用string_if_invalid 替换这个变量。Django 模型对象自动生成的delete() 和save() 方法自动 设置alters_data=True。 例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sensitive_function</span><span class="params">(self)</span>:</span></div><div class="line">        self.database_record.delete()</div><div class="line">    sensitive_function.alters_data = <span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<p>有时候，处于某些原因你可能想关闭这个功能，并告诉模板系统无论什么情况下都不要调用变量。设置可调用对象的do_not_call_in_templates 属性的值为True 可以实现这点。模板系统的行为将类似这个变量是不可调用的（例如，你可以访问可调用对象的属性）。<br><code>query_pk_and_slug</code>如果为<code>True</code>,<code>get_object()</code>将使用两者一起来查找。可以防止只使用<code>pk</code>时，如果<code>pk</code>连续，直接被攻击者都遍历<code>pk</code>获取整个列表</p>
</blockquote>
<h2 id="内建基于类的视图的API"><a href="#内建基于类的视图的API" class="headerlink" title="内建基于类的视图的API"></a><a href="http://python.usyiyi.cn/django/ref/class-based-views/index.html" target="_blank" rel="external">内建基于类的视图的API</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^view/$'</span>, MyView.as_view(size=<span class="number">42</span>)),</div><div class="line">]</div></pre></td></tr></table></figure>
<blockquote>
<p>视图参数的线程安全性<br>传递给视图的参数在视图的每个实例之间共享。这表示不应该使用列表、字典或其它可变对象作为视图的参数。如果你真这么做而且对共享的对象做过修改，某个用户的行为可能对后面访问同一个视图的用户产生影响。</p>
</blockquote>
<h2 id="基于类的通用视图-——-索引"><a href="#基于类的通用视图-——-索引" class="headerlink" title="基于类的通用视图 —— 索引"></a><a href="http://python.usyiyi.cn/django/ref/class-based-views/flattened-index.html" target="_blank" rel="external">基于类的通用视图 —— 索引</a></h2><h2 id="使用Django输出CSV"><a href="#使用Django输出CSV" class="headerlink" title="使用Django输出CSV"></a><a href="http://python.usyiyi.cn/django/howto/outputting-csv.html" target="_blank" rel="external">使用Django输出CSV</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> csv</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_view</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="comment"># Create the HttpResponse object with the appropriate CSV header.</span></div><div class="line">    response = HttpResponse(content_type=<span class="string">'text/csv'</span>)</div><div class="line">    response[<span class="string">'Content-Disposition'</span>] = <span class="string">'attachment; filename="somefilename.csv"'</span></div><div class="line"> </div><div class="line">    writer = csv.writer(response)</div><div class="line">    writer.writerow([<span class="string">'First row'</span>, <span class="string">'Foo'</span>, <span class="string">'Bar'</span>, <span class="string">'Baz'</span>])</div><div class="line">    writer.writerow([<span class="string">'Second row'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'"Testing"'</span>, <span class="string">"Here's a quote"</span>])</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> response</div></pre></td></tr></table></figure>
<h2 id="使用Django输出PDF"><a href="#使用Django输出PDF" class="headerlink" title="使用Django输出PDF"></a><a href="http://python.usyiyi.cn/django/howto/outputting-pdf.html" target="_blank" rel="external">使用Django输出PDF</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> reportlab.pdfgen <span class="keyword">import</span> canvas</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_view</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="comment"># Create the HttpResponse object with the appropriate PDF headers.</span></div><div class="line">    response = HttpResponse(content_type=<span class="string">'application/pdf'</span>)</div><div class="line">    response[<span class="string">'Content-Disposition'</span>] = <span class="string">'attachment; filename="somefilename.pdf"'</span></div><div class="line"> </div><div class="line">    <span class="comment"># Create the PDF object, using the response object as its "file."</span></div><div class="line">    p = canvas.Canvas(response)</div><div class="line"> </div><div class="line">    <span class="comment"># Draw things on the PDF. Here's where the PDF generation happens.</span></div><div class="line">    <span class="comment"># See the ReportLab documentation for the full list of functionality.</span></div><div class="line">    p.drawString(<span class="number">100</span>, <span class="number">100</span>, <span class="string">"Hello world."</span>)</div><div class="line"> </div><div class="line">    <span class="comment"># Close the PDF object cleanly, and we're done.</span></div><div class="line">    p.showPage()</div><div class="line">    p.save()</div><div class="line">    <span class="keyword">return</span> response</div></pre></td></tr></table></figure>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a><a href="http://python.usyiyi.cn/django/topics/http/middleware.html" target="_blank" rel="external">中间件</a></h2><p>中间件的顺序很重要<br>接受请求时，自上向下调用中间件<br>返回响应时，自下向上调用中间件<br><code>process_request(request)</code><br>在django决定执行哪个视图之前（也就是解析url之前）被调用<br>返回<code>None</code>继续处理请求<br>返回<code>HttpResponse</code>不再去调用其它的request、view 或exception 中间件，或对应的视图，直接调用响应阶段的中间件，并返回结果</p>
<p><code>process_view(request, view_func, view_args, view_kwargs)</code><br><em>注：<code>view_args</code>和<code>view_kwargs</code>都不包含<code>request</code></em><br>在django调用视图之前被调用<br>返回<code>None</code>继续处理请求<br>返回<code>HttpResponse</code>不再去调用其它的view 或exception 中间件，或对应的视图，直接调用响应阶段的中间件，并返回结果</p>
<blockquote>
<p>注意<br>在中间件内部，从process_request 或process_view 中访问request.POST 或request.REQUEST 将阻碍该中间件之后的所有视图无法修改请求的上传处理程序，一般情况下要避免这样使用。<br>类CsrfViewMiddleware可以被认为是个例外，因为它提供csrf_exempt() 和csrf_protect()两个装饰器，允许视图显式控制在哪个点需要开启CSRF验证。</p>
</blockquote>
<p><code>process_template_response(request, response)</code><br>在视图刚好执行完毕之后被调用<br>必须返回一个实现了<code>render</code>方法的响应对象</p>
<p><code>process_response(request, response)</code><br>在所有响应返回浏览器之前被调用<br>必须返回<code>HttpResponse</code>或者<code>StreamingHttpResponse</code>对象<br><strong><em><a href="http://python.usyiyi.cn/django/topics/http/middleware.html#dealing-with-streaming-responses" target="_blank" rel="external">处理流式响应</a></em></strong></p>
<p><code>process_exception(request, exception)</code><br>在视图抛出异常时被调用<br>返回<code>None</code><br>返回<code>HttpResponse</code> <code>process_template_response</code>和响应中间件会被调用<br><strong>在处理响应期间，中间件的执行顺序是倒序执行的，这包括process_exception，如果一个中间件的<code>process_exception</code>返回了一个响应，那么这个中间件上面的中间件中的<code>process_exception</code>都不会被调用</strong></p>
<p><code>__init__()</code><br>大多数中间件类都不需要初始化方法<br>django初始化中间件无需任何参数，所以不能定义一个有参数的<code>__init__方法</code><strong>init</strong><code>不会每次请求都执行，只在Web服务器响应第一个请求时执行
标记中间件不被使用</code><strong>init</strong><code>抛出</code>django.core.exceptions.MiddlewareNotUsed`异常，django会从中间件处理过程中移动这部分中间件，并且当DEBUG为True的时候在django.request记录器中记录调试信息。</p>
<ul>
<li>中间件类不能是任何类的子类</li>
<li>中间件可以放在python路径中的任务位置<br>正常<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">A.init</div><div class="line">B.init</div><div class="line">C.init</div><div class="line">D.init</div><div class="line">A.process_request</div><div class="line">B.process_request</div><div class="line">C.process_request</div><div class="line">D.process_request</div><div class="line">A.process_view</div><div class="line">B.process_view</div><div class="line">C.process_view</div><div class="line">D.process_view</div><div class="line"> </div><div class="line">D.process_template_response</div><div class="line">C.process_template_response</div><div class="line">B.process_template_response</div><div class="line">A.process_template_response</div><div class="line">D.process_responst</div><div class="line">C.process_responst</div><div class="line">B.process_responst</div><div class="line">A.process_responst</div></pre></td></tr></table></figure>
</li>
</ul>
<p>视图异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">A.init</div><div class="line">B.init</div><div class="line">C.init</div><div class="line">D.init</div><div class="line">A.process_request</div><div class="line">B.process_request</div><div class="line">C.process_request</div><div class="line">D.process_request</div><div class="line">A.process_view</div><div class="line">B.process_view</div><div class="line">C.process_view</div><div class="line">D.process_view</div><div class="line"></div><div class="line">D.process_responst</div><div class="line">C.process_responst</div><div class="line">B.process_responst</div><div class="line">A.process_responst</div></pre></td></tr></table></figure></p>
<h2 id="django中可用的中间件"><a href="#django中可用的中间件" class="headerlink" title="django中可用的中间件"></a><a href="http://python.usyiyi.cn/django/ref/middleware.html#middleware-ordering" target="_blank" rel="external">django中可用的中间件</a></h2><h3 id="class-CommonMiddleware"><a href="#class-CommonMiddleware" class="headerlink" title="class CommonMiddleware"></a><code>class CommonMiddleware</code></h3><p><code>DISALLOWED_USER_AGENTS</code>禁用匹配的<code>user-agents</code>访问网站<br><code>APPEND_SLASH</code>如果url结尾没有斜杠结尾，并且没有找到匹配的url，django会在结尾加上斜杠再匹配一次<br><code>PREPEND_WWW</code>如果url会重定向到www到头的网址<br><code>USE_ETAGS</code>设置来处理ETag。如果设置USE_ETAGS为True，Django会通过MD5-hashing处理页面的内容来为每一个页面请求计算Etag，并且如果合适的话，它将会发送携带Not Modified的响应。</p>
<h3 id="class-BrokenLinkEmailsMiddleware"><a href="#class-BrokenLinkEmailsMiddleware" class="headerlink" title="class BrokenLinkEmailsMiddleware"></a><code>class BrokenLinkEmailsMiddleware</code></h3><p>向<code>MANAGERS</code> 发送死链提醒邮件</p>
<h3 id="class-GZipMiddleware"><a href="#class-GZipMiddleware" class="headerlink" title="class GZipMiddleware"></a><code>class GZipMiddleware</code></h3><p>为支持<code>GZip</code>压缩的浏览器压缩内容<br>建议放在中间件配置列表的第一个<br>可通过<code>gzip_page()</code>装饰器使用独立的<code>GZip</code>压缩</p>
<h3 id="class-ConditionalGetMiddleware"><a href="#class-ConditionalGetMiddleware" class="headerlink" title="class ConditionalGetMiddleware"></a><code>class ConditionalGetMiddleware</code></h3><h3 id="class-LocaleMiddeware"><a href="#class-LocaleMiddeware" class="headerlink" title="class LocaleMiddeware"></a><code>class LocaleMiddeware</code></h3><p>基于请求中的数据开启语言选择，它可以为每个用户进行定制。</p>
<h3 id="class-MessageMiddleware"><a href="#class-MessageMiddleware" class="headerlink" title="class MessageMiddleware"></a><code>class MessageMiddleware</code></h3><p>开启基于<code>Cookie</code>和会话的消息支持</p>
<h3 id="class-SecurityMiddleware"><a href="#class-SecurityMiddleware" class="headerlink" title="class SecurityMiddleware"></a><code>class SecurityMiddleware</code></h3><p><a href="http://python.usyiyi.cn/django/ref/middleware.html#middleware-ordering" target="_blank" rel="external">中间件的排序</a></p>
<h2 id="模版"><a href="#模版" class="headerlink" title="模版"></a><a href="http://python.usyiyi.cn/django/topics/templates.html" target="_blank" rel="external">模版</a></h2><p><code>DjangoTemplates</code>引擎<code>OPTIONS</code>配置项中接受以下参数<br><code>string_if_invalid</code>当模版变量无效时，使用此值代替<br>可使用<br>comment<br>和<br>endcomment<br>进行多行注释</p>
<h2 id="Django模版语言"><a href="#Django模版语言" class="headerlink" title="Django模版语言"></a><a href="http://python.usyiyi.cn/django/ref/templates/language.html" target="_blank" rel="external">Django模版语言</a></h2><p>当模版系统遇到<code>.</code>时，按下面顺序查询<br>从技术上来说，当模版系统遇到点(“.”)，它将以这样的顺序查询：</p>
<ul>
<li>字典查询（Dictionary lookup）</li>
<li>属性或方法查询（Attribute or method lookup）</li>
<li>数字索引查询（Numeric index lookup）</li>
</ul>
<p>模版变量最终解释成字面量，而不是变量值</p>
<p>load<br>可接受多个库名称<br>load humanize i18n<br>load<br>不支持继承</p>
<h2 id="内置标签与过滤器"><a href="#内置标签与过滤器" class="headerlink" title="内置标签与过滤器"></a><a href="http://python.usyiyi.cn/django/ref/templates/builtins.html" target="_blank" rel="external">内置标签与过滤器</a></h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p><code>filter</code>对一段内容进行过滤，使用<code>|</code>对多个过滤器进行连接，且过滤器可以有参数<br><em>比如一段纯文本不能使用之前说的过滤器写法，则可以使用<code>filter</code></em><br><code>firstof</code>输出第一个不为<code>False</code>的参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% firstof var1 var2|safe var3 &quot;&lt;strong&gt;fallback value&lt;/strong&gt;&quot;|safe %&#125;</div></pre></td></tr></table></figure></p>
<p><code>ifchanged</code>检查循环中的一个值从最近一次重复其是否改变，支持`else</p>
<p><code>with</code>可往<code>include</code>的模版里传上下文件变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% include &quot;name_snippet.html&quot; with person=&quot;Jane&quot; greeting=&quot;Hello&quot; %&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% include &quot;name_snippet.html&quot; with greeting=&quot;Hi&quot; only %&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% lorem %&#125;</div></pre></td></tr></table></figure>
<p>设计人员工具，好像是生成随机单词和段落<br><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">lorem</span> %&#125;</span><span class="xml"></span></div><div class="line"><span class="template-tag">&#123;% <span class="name">lorem</span> 3 p  %&#125;</span><span class="xml"></span></div><div class="line"><span class="template-tag">&#123;% <span class="name">lorem</span> 10 w random %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure></p>
<h2 id="人性化"><a href="#人性化" class="headerlink" title="人性化"></a><a href="http://python.usyiyi.cn/django/ref/contrib/humanize.html" target="_blank" rel="external">人性化</a></h2><p><code>apnumber</code>转换整数或整数的字符串形式为英文描述<br>1 会变成one<br><code>intcomma</code>转换成第三位带一个逗号<br>4500 会变成 4,500<br><code>intword</code>将大的整数转换为友好的文字表示<br>1000000 会变成 1.0 million<br><code>naturalday</code>对于当天或者一天之内的日期， 返回“今天”，“明天”或者“昨天”，视情况而定。否则，使用传进来的格式字符串给日期格式化<br><code>naturaltime</code>对于日期时间的值，返回一个字符串来表示多少秒、分钟或者小时之前<br>例如（其中“现在”是2007年2月17日16时30分0秒）：<br>17 Feb 2007 16:30:00 会变成 now<br>17 Feb 2007 16:29:31 会变成 29 seconds ago<br><code>ordinal</code>将一个整数或是整数的字符串，转换为它的序数词<br>1 会变成 1st<br>2 会变成  2nd<br>3 会变成  3rd</p>
<h2 id="Django-模板语言：面向Python程序员"><a href="#Django-模板语言：面向Python程序员" class="headerlink" title="Django 模板语言：面向Python程序员"></a><a href="http://python.usyiyi.cn/django/ref/templates/api.html" target="_blank" rel="external">Django 模板语言：面向Python程序员</a></h2><p><code>string_if_invalid</code>建议只在调试时设置，调试完成后就关闭，开发时最好不要使用，不然可能会遇到渲染问题</p>
<p>每个上下文都包含<code>True</code> <code>False</code> <code>None</code></p>
<h3 id="使用Context对象"><a href="#使用Context对象" class="headerlink" title="[使用Context对象]"></a>[使用<code>Context</code>对象]</h3><p><em><a href="http://python.usyiyi.cn/django/ref/templates/api.html#playing-with-context-objects" target="_blank" rel="external">这里比较难理解</a></em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Context.get(key, otherwise=<span class="keyword">None</span>)</div><div class="line">Context.pop()</div><div class="line">Context.push()</div><div class="line">Context.update(other_dict)</div></pre></td></tr></table></figure></p>
<blockquote>
<p>上下文处理器应用的时机<br>上下文处理器应用在上下文数据的顶端。也就是说，上下文处理器可能覆盖你提供给Context 或RequestContext 的变量，所以要注意避免与上下文处理器提供的变量名重复。<br>如果想要上下文数据的优先级高于上下文处理器，使用下面的模式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> RequestContext</div><div class="line">request_context = RequestContext(request)</div><div class="line">request_context.push(&#123;<span class="string">"my_name"</span>: <span class="string">"Adrian"</span>&#125;)</div></pre></td></tr></table></figure></p>
</blockquote>
<p>Django 通过这种方式允许上下文数据在render() 和 TemplateResponse 等API 中覆盖上下文处理器。<br>你还可以赋予<code>RequestContext</code>一个额外的处理器列表，使用第三个可选的位置参数processors。在下面的示例中，RequestContext 实例获得一个ip_address 变量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_view</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div><div class="line">    c = RequestContext(request, &#123;</div><div class="line">        <span class="string">'foo'</span>: <span class="string">'bar'</span>,</div><div class="line">    &#125;, [<span class="string">'ip_address'</span>:<span class="string">'127.0.0.1'</span>])</div><div class="line">    <span class="keyword">return</span> HttpResponse(t.render(c))</div></pre></td></tr></table></figure></p>
<p>上面例子中<code>ip_address</code>也会加入到上下文中</p>
<h3 id="内建的模板上下文处理器"><a href="#内建的模板上下文处理器" class="headerlink" title="内建的模板上下文处理器"></a>内建的模板上下文处理器</h3><p>下面是内奸的上下文处理器所添加的内容<br><code>django.contrib.auth.context_processors.auth</code></p>
<ul>
<li><code>user</code></li>
<li><code>perms</code></li>
</ul>
<p><code>django.template.context_processors.debug</code></p>
<ul>
<li>debug</li>
<li>sql_queryes<br>一个{‘sql’: …, ‘time’: …} 字典的列表，表示请求期间到目前为止发生的每个SQL 查询及花费的时间。这个列表按查询的顺序排序，并直到访问时才生成。</li>
</ul>
<p><code>django.template.context_processors.i18n</code></p>
<ul>
<li><code>MEDIA_URL</code></li>
</ul>
<p><code>django.template.context_processors.static</code></p>
<ul>
<li><code>STATIC_URL</code></li>
</ul>
<p><code>django.template.context_processors.csrf</code></p>
<ul>
<li><code>csrf_token</code></li>
</ul>
<p><code>django.template.context_processors.request</code></p>
<ul>
<li><code>request</code></li>
</ul>
<p><code>django.contrib.messages.context_processors.messages</code></p>
<ul>
<li><code>messages</code></li>
<li><code>DEFAULT_MESSAGE_LEVELS</code></li>
</ul>
<h2 id="自定义模板标签和过滤器"><a href="#自定义模板标签和过滤器" class="headerlink" title="自定义模板标签和过滤器"></a><a href="http://python.usyiyi.cn/django/howto/custom-template-tags.html" target="_blank" rel="external">自定义模板标签和过滤器</a></h2><h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</div><div class="line">register = template.Library()</div><div class="line"><span class="meta">@register.filter(name='cut')</span></div><div class="line"> </div><div class="line">register.filter(<span class="string">'cut'</span>, cut)</div><div class="line">register.filter(<span class="string">'lower'</span>, lower)</div><div class="line"><span class="comment"># or</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut</span><span class="params">(value, arg)</span>:</span></div><div class="line">    <span class="keyword">return</span> value.replace(arg, <span class="string">''</span>)</div><div class="line"> </div><div class="line"><span class="meta">@register.filter</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lower</span><span class="params">(value)</span>:</span></div><div class="line">    <span class="keyword">return</span> value.lower()</div></pre></td></tr></table></figure>
<p>可使用<code>SafeData</code>来验证是否是安全数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> isinstance(value, SafeData):</div><div class="line">    <span class="comment"># Do something with the "safe" string.</span></div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<p>或使用<code>is_safe</code>来控制只接收的安全的数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@register.filter(is_safe=True)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfilter</span><span class="params">(value)</span>:</span></div><div class="line">    <span class="keyword">return</span> value</div></pre></td></tr></table></figure></p>
<h3 id="自定义标签"><a href="#自定义标签" class="headerlink" title="自定义标签"></a>自定义标签</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</div><div class="line"> </div><div class="line">register = template.Library()</div><div class="line"> </div><div class="line"><span class="meta">@register.simple_tag</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">current_time</span><span class="params">(format_string)</span>:</span></div><div class="line">    <span class="keyword">return</span> datetime.datetime.now().strftime(format_string)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% show_results poll %&#125;</div></pre></td></tr></table></figure>
<p>写一个标签，实现下面的效果<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>First choice<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Second choice<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Third choice<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>例子1开始<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@register.inclusion_tag('results.html')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_results</span><span class="params">(poll)</span>:</span></div><div class="line">    choices = poll.choice_set.all()</div><div class="line">    <span class="keyword">return</span> &#123;<span class="string">'choices'</span>: choices&#125;</div></pre></td></tr></table></figure></p>
<p><code>results.html</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">&#123;% for choice in choices %&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123;&#123; choice &#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">&#123;% endfor %&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>例子1结束</p>
<p>可使用<code>takes_context=True</code>直接访问上下文件中的数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@register.inclusion_tag('link.html', takes_context=True)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jump_link</span><span class="params">(context)</span>:</span></div><div class="line">    <span class="comment"># 因为takes_context=True所以这里的context就是上下文，可以从里面拿想要的数据，如果有多个参数，方法里的第一个参数名必须是context</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="string">'link'</span>: context[<span class="string">'home_link'</span>],</div><div class="line">        <span class="string">'title'</span>: context[<span class="string">'home_title'</span>],</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p><code>link.html</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; link &#125;&#125;"</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</div></pre></td></tr></table></figure></p>
<p>页面直接写<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% jump_link %&#125;</div></pre></td></tr></table></figure></p>
<p>位置参数和关键字参数和<code>python</code>语法一样<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@register.inclusion_tag('my_template.html')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_tag</span><span class="params">(a, b, *args, **kwargs)</span>:</span></div><div class="line">    warning = kwargs[<span class="string">'warning'</span>]</div><div class="line">    profile = kwargs[<span class="string">'profile'</span>]</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> ...</div></pre></td></tr></table></figure></p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">my_tag</span> 123 "abcd" book.title warning=message|<span class="name">lower</span> profile=user.profile %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
<p>还有一个<code>register.assignment_tag</code>与<code>register.simple_tag</code>功能一样，不知道有什么特殊作用</p>
<h2 id="使用表单"><a href="#使用表单" class="headerlink" title="使用表单"></a><a href="http://python.usyiyi.cn/django/topics/forms/index.html" target="_blank" rel="external">使用表单</a></h2><p>一些表单输入自带有html5的验证，要禁用这些验证可以设置<code>form</code>标签的<code>novalidate</code>属性</p>
<p><code>is_bound</code>可以判断一个表单是否具有绑定数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 未绑定表单</span></div><div class="line">f = ContactForm()</div><div class="line">data = &#123;<span class="string">'subject'</span>: <span class="string">'hello'</span>,</div><div class="line">        <span class="string">'message'</span>: <span class="string">'Hi there'</span>,</div><div class="line">        <span class="string">'sender'</span>: <span class="string">'foo@example.com'</span>,</div><div class="line">        <span class="string">'cc_myself'</span>: <span class="keyword">True</span>&#125;</div><div class="line"><span class="comment"># 已绑定的表单</span></div><div class="line">f = ContactForm(data)</div></pre></td></tr></table></figure></p>
<p>当表单通过<code>is_valid()</code>方法验证后，可以直接在<code>form.cleaned_data</code>中拿值，并且是已经转换好的<code>python</code>格式的数据，但仍然可以从<code>request.POST</code>直接访问到未验证的数据。</p>
<p>表单排列<br><code></code><br><code></code><br><code></code></p>
<p>表单属性<br><code></code>字段html标签<br><code></code>字段的<code>lable</code>html标签<br><code></code>字段<code>lable</code>标签上的<code>for</code>值，也是字段标签上的<code>id</code></p>
<p><code></code>隐藏字段列表<br><code></code>显示的字段列表</p>
<p>错误信息<br><code></code>不是特定字段的错误<br><code></code>全部错误，一个字典<br><code></code>字段错误</p>
<p>可从<code>form</code>从遍历出<code>field</code><br><code></code>有以下属性<br><code>``Model</code>或是<code>Form</code>上的<code>label</code>的值<br><code></code>整个<code>label</code>标签，包含冒号<br><code></code>字段的id<br><code></code>字段的值<br><code></code>字段的<code>name</code>，考虑表单的前缀<br><code></code>字段的帮助文档<br><code></code>字段的错误<br><code></code>判断字段是否隐藏<br><code></code>表单类中<code>Field</code>的实例，可以使用它来访问<code>Field</code>属性，如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name.field.max_length</div></pre></td></tr></table></figure></p>
<h2 id="表单-API"><a href="#表单-API" class="headerlink" title="表单 API"></a><a href="http://python.usyiyi.cn/django/ref/forms/api.html" target="_blank" rel="external">表单 API</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 未绑定表单</span></div><div class="line">f = ContactForm()</div><div class="line">data = &#123;<span class="string">'subject'</span>: <span class="string">'hello'</span>,</div><div class="line">        <span class="string">'message'</span>: <span class="string">'Hi there'</span>,</div><div class="line">        <span class="string">'sender'</span>: <span class="string">'foo@example.com'</span>,</div><div class="line">        <span class="string">'cc_myself'</span>: <span class="keyword">True</span>&#125;</div><div class="line"><span class="comment"># 已绑定的表单</span></div><div class="line">f = ContactForm(data)</div></pre></td></tr></table></figure>
<p>表单实例一但创建，数据不可更改</p>
<h3 id="Form-clean"><a href="#Form-clean" class="headerlink" title="Form.clean()"></a><code>Form.clean()</code></h3><h3 id="Form-is-valid"><a href="#Form-is-valid" class="headerlink" title="Form.is_valid()"></a><code>Form.is_valid()</code></h3><h3 id="Form-errors"><a href="#Form-errors" class="headerlink" title="Form.errors"></a><code>Form.errors</code></h3><blockquote>
<p><code>Form.errors</code><br>访问errors 属性可以获得错误信息的一个字典：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.errors</div><div class="line">&#123;<span class="string">'sender'</span>: [<span class="string">'Enter a valid email address.'</span>], <span class="string">'subject'</span>: [<span class="string">'This field is required.'</span>]&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>在这个字典中，键为字段的名称，值为表示错误信息的Unicode 字符串组成的列表。错误信息保存在列表中是因为字段可能有多个错误信息。<br>你可以在调用is_valid() 之前访问errors。表单的数据将在第一次调用is_valid() 或者访问errors 时验证。<br>验证只会调用一次，无论你访问errors 或者调用is_valid() 多少次。这意味着，如果验证过程有副作用，这些副作用将只触发一次。</p>
<h3 id="Form-errors-as-data"><a href="#Form-errors-as-data" class="headerlink" title="Form.errors.as_data()"></a><code>Form.errors.as_data()</code></h3><blockquote>
<p>返回一个字典，它映射字段到原始的ValidationError 实例</p>
</blockquote>
<h3 id="Form-errors-as-json-escape-html-False"><a href="#Form-errors-as-json-escape-html-False" class="headerlink" title="Form.errors.as_json(escape_html=False)"></a><code>Form.errors.as_json(escape_html=False)</code></h3><blockquote>
<p>返回JSON 序列化后的错误。</p>
</blockquote>
<h3 id="Form-add-error-field-error"><a href="#Form-add-error-field-error" class="headerlink" title="Form.add_error(field, error)"></a><code>Form.add_error(field, error)</code></h3><blockquote>
<p>这个方法允许在Form.clean() 方法内部或从表单的外部一起给字段添加错误信息<br>Form.add_error() 会自动删除cleaned_data 中的相关字段</p>
</blockquote>
<h3 id="Form-has-error-field-code-None"><a href="#Form-has-error-field-code-None" class="headerlink" title="Form.has_error(field, code=None)"></a><code>Form.has_error(field, code=None)</code></h3><blockquote>
<p>这个方法返回一个布尔值，指示一个字段是否具有指定错误code 的错误。当code 为None 时，如果字段有任何错误它都将返回True。<br>若要检查非字段错误，使用NON_FIELD_ERRORS 作为field 参数。</p>
</blockquote>
<h3 id="Form-non-field-errors"><a href="#Form-non-field-errors" class="headerlink" title="Form.non_field_errors()"></a><code>Form.non_field_errors()</code></h3><blockquote>
<p>这个方法返回Form.errors 中不是与特定字段相关联的错误。它包含在Form.clean() 中引发的ValidationError 和使用Form.add_error(None, “…”) 添加的错误。</p>
</blockquote>
<p>未绑定表单的行为<br>验证没有绑定数据的表单是没有意义的，下面的例子展示了这种情况：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = ContactForm()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.is_valid()</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.errors</div><div class="line">&#123;&#125;</div></pre></td></tr></table></figure>
<h3 id="Form-initial"><a href="#Form-initial" class="headerlink" title="Form.initial"></a><code>Form.initial</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = ContactForm(initial=&#123;<span class="string">'subject'</span>: <span class="string">'Hi there!'</span>&#125;)</div></pre></td></tr></table></figure>
<p>这些值只显示在没有绑定的表单中，即使没有提供特定值它们也<strong><em>不会作为后备的值</em></strong>。<br>优先级高于<code>Form</code>中的<code>initial</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from django import forms</div><div class="line">&gt;&gt;&gt; class CommentForm(forms.Form):</div><div class="line">...     name = forms.CharField(initial='class')</div><div class="line">...     url = forms.URLField()</div><div class="line">...     comment = forms.CharField()</div><div class="line">&gt;&gt;&gt; f = CommentForm(initial=&#123;'name': 'instance'&#125;, auto_id=False)</div><div class="line">&gt;&gt;&gt; print(f)</div><div class="line">&lt;tr&gt;&lt;th&gt;Name:&lt;/th&gt;&lt;td&gt;&lt;input type="text" name="name" value="instance" /&gt;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">&lt;tr&gt;&lt;th&gt;Url:&lt;/th&gt;&lt;td&gt;&lt;input type="url" name="url" /&gt;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">&lt;tr&gt;&lt;th&gt;Comment:&lt;/th&gt;&lt;td&gt;&lt;input type="text" name="comment" /&gt;&lt;/td&gt;&lt;/tr&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Form-has-changed"><a href="#Form-has-changed" class="headerlink" title="Form.has_changed()"></a><code>Form.has_changed()</code></h3><p><strong>也有<code>Field.has_changed()</code>方法</strong><br>检查表单数据是否从初始数据发生改变<br>当提交表单时，我们可以重新构建表单并提供初始值，这样可以实现比较：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = ContactForm(request.POST, initial=data)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.has_changed()</div></pre></td></tr></table></figure></p>
<p>如果request.POST 中的数据与initial 中的不同，has_changed() 将为True，否则为False。 计算的结果是通过调用表单每个字段的Field.has_changed() 得到的。</p>
<p><code>Form.fields</code><br>从表单中访问字段<br>是一个<code>OrderedDict</code><br>可你可以修改表单实例的字段来改变字段在表单中的表示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.as_table().split(<span class="string">'\n'</span>)[<span class="number">0</span>]</div><div class="line"><span class="string">'&lt;tr&gt;&lt;th&gt;Name:&lt;/th&gt;&lt;td&gt;&lt;input name="name" type="text" value="instance" /&gt;&lt;/td&gt;&lt;/tr&gt;'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.fields[<span class="string">'name'</span>].label = <span class="string">"Username"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.as_table().split(<span class="string">'\n'</span>)[<span class="number">0</span>]</div><div class="line"><span class="string">'&lt;tr&gt;&lt;th&gt;Username:&lt;/th&gt;&lt;td&gt;&lt;input name="name" type="text" value="instance" /&gt;&lt;/td&gt;&lt;/tr&gt;'</span></div></pre></td></tr></table></figure></p>
<p>注意不要改变base_fields 属性，因为一旦修改将影响同一个Python 进程中接下来所有的ContactForm 实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.base_fields[<span class="string">'name'</span>].label = <span class="string">"Username"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>another_f = CommentForm(auto_id=<span class="keyword">False</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>another_f.as_table().split(<span class="string">'\n'</span>)[<span class="number">0</span>]</div><div class="line"><span class="string">'&lt;tr&gt;&lt;th&gt;Username:&lt;/th&gt;&lt;td&gt;&lt;input name="name" type="text" value="class" /&gt;&lt;/td&gt;&lt;/tr&gt;'</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>cleaned_data 始终只 包含表单中定义的字段，即使你在构建表单 时传递了额外的数据。<br>cleaned_data 始终只 包含表单中定义的字段，即使你在构建表单 时传递了额外的数据。<br>当表单合法时，cleaned_data 将包含所有字段的键和值，即使传递的数据不包含某些可选字段的值。</p>
</blockquote>
<h3 id="Form-cleaned-data"><a href="#Form-cleaned-data" class="headerlink" title="Form.cleaned_data"></a><code>Form.cleaned_data</code></h3><h3 id="Form-as-p"><a href="#Form-as-p" class="headerlink" title="Form.as_p"></a><code>Form.as_p</code></h3><p><code>Form.as_ul</code><br><code>Form.as_table</code></p>
<h3 id="Form-error-css-class-Form-required-css-class"><a href="#Form-error-css-class-Form-required-css-class" class="headerlink" title="Form.error_css_class Form.required_css_class"></a><code>Form.error_css_class</code> <code>Form.required_css_class</code></h3><p>在<code>Form</code>类下可以用上面两个属性定义错误样式和必填样式，没有默认值，<code>required_css_class</code>也会回在<code>label</code>标签上</p>
<h2 id="Form-auto-id"><a href="#Form-auto-id" class="headerlink" title="Form.auto_id"></a><code>Form.auto_id</code></h2><p>控制表单上的<code>label</code>和表单元素的id，值为<code>True</code>，<code>False</code>或字符串，支持<code>%s</code>占位符，表示当前字段名</p>
<blockquote>
<p>如果auto_id 设置为任何其它的真值 —— 例如不包含%s 的字符串 —— 那么其行为将类似auto_id 等于True。<br>默认情况下，auto<em>id 设置为’id</em>%s’。</p>
</blockquote>
<h3 id="Form-label-suffix"><a href="#Form-label-suffix" class="headerlink" title="Form.label_suffix"></a><code>Form.label_suffix</code></h3><p>默认为英文的<code>:</code></p>
<h3 id="BoundField"><a href="#BoundField" class="headerlink" title="BoundField"></a><code>BoundField</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">form = ContactForm()</div><div class="line"><span class="keyword">for</span> boundfield <span class="keyword">in</span> form:</div><div class="line">    print(boundfield)</div><div class="line"><span class="comment"># 或</span></div><div class="line"><span class="keyword">from</span>[<span class="string">'name'</span>]</div></pre></td></tr></table></figure>
<p><code>BoundField.errors</code><br><code>BoundField.label_tag(contents=None, attrs=None, label_suffix=None)</code><br><code>BoundField.css_classes()</code><br><code>BoundField.value()</code><br>提供初始值，会被绑定值覆盖<br><code>BoundField.id_for_label</code></p>
<h3 id="Form-is-multipart"><a href="#Form-is-multipart" class="headerlink" title="Form.is_multipart()"></a><code>Form.is_multipart()</code></h3><p>可判断表单是否需要<code>multipart</code><br><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> form.is_multipart %&#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/foo/"</span>&gt;</span></div><div class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/foo/"</span>&gt;</span></div><div class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></div><div class="line"><span class="template-variable">&#123;&#123; form &#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>子类化表单时可通过设置<code>None</code>来删除从父类中继承过来的字段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django <span class="keyword">import</span> forms</div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">ParentForm</span><span class="params">(forms.Form)</span>:</span></div><div class="line"><span class="meta">... </span>    name = forms.CharField()</div><div class="line"><span class="meta">... </span>    age = forms.IntegerField()</div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">ChildForm</span><span class="params">(ParentForm)</span>:</span></div><div class="line"><span class="meta">... </span>    name = <span class="keyword">None</span></div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ChildForm().fields.keys()</div><div class="line"><span class="meta">... </span>[<span class="string">'age'</span>]</div></pre></td></tr></table></figure></p>
<h3 id="Form-prefix"><a href="#Form-prefix" class="headerlink" title="Form.prefix"></a><code>Form.prefix</code></h3><p>如果在页面中需要放多个相同的表单，可以设置表单的前缀<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; father = PersonForm()</div><div class="line">&gt;&gt;&gt; print(father.as_ul())</div><div class="line">&lt;li&gt;&lt;label for="id_first_name"&gt;First name:&lt;/label&gt; &lt;input type="text" name="first_name" id="id_first_name" /&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;label for="id_last_name"&gt;Last name:&lt;/label&gt; &lt;input type="text" name="last_name" id="id_last_name" /&gt;&lt;/li&gt;</div><div class="line">&gt;&gt;&gt; mother = PersonForm(prefix="mother")</div><div class="line">&gt;&gt;&gt; print(mother.as_ul())</div><div class="line">&lt;li&gt;&lt;label for="id_mother-first_name"&gt;First name:&lt;/label&gt; &lt;input type="text" name="mother-first_name" id="id_mother-first_name" /&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;label for="id_mother-last_name"&gt;Last name:&lt;/label&gt; &lt;input type="text" name="mother-last_name" id="id_mother-last_name" /&gt;&lt;/li&gt;</div></pre></td></tr></table></figure></p>
<h2 id="表单字段"><a href="#表单字段" class="headerlink" title="表单字段"></a><a href="http://python.usyiyi.cn/django/ref/forms/fields.html" target="_blank" rel="external">表单字段</a></h2><h3 id="Field-has-change"><a href="#Field-has-change" class="headerlink" title="Field.has_change()"></a><code>Field.has_change()</code></h3><p>检查字段的值是否从初始值发生改变</p>
<h3 id="内建字段"><a href="#内建字段" class="headerlink" title="内建字段"></a>内建字段</h3><h4 id="BooleanField"><a href="#BooleanField" class="headerlink" title="BooleanField"></a><code>BooleanField</code></h4><p>Widget：<code>CheckboxInput</code><br>错误信息的键：<code>required</code></p>
<h4 id="CharField"><a href="#CharField" class="headerlink" title="CharField"></a><code>CharField</code></h4><p>Widget：<code>TextInput</code><br>错误信息的键：<code>required``max_length``min_length</code><br>接收两个可选参数<br><code>max_length``min_length</code></p>
<h4 id="ChoiceField"><a href="#ChoiceField" class="headerlink" title="ChoiceField"></a><code>ChoiceField</code></h4><p>Widtget：<code>Select</code><br>错误信息的键：<code>required``invalid_choice</code><br><code>invalid_choice</code>错误消息可能包含<code>%(value)s</code>，它将被选择的选项替换掉。<br>接收一个额外的必选参数<br><code>choices</code><br>是一个二元组组成的可迭代对象</p>
<h4 id="TypeChoiceField"><a href="#TypeChoiceField" class="headerlink" title="TypeChoiceField"></a><code>TypeChoiceField</code></h4><p>Widget：<code>Select</code><br>错误信息的键：<code>required``invalid_choice</code><br>接收额外的参数<br><code>choices</code><br>是一个二元组组成的可迭代对象<br><code>coerce</code><br>    接收一个参数并返回强制转换后的值的一个函数。例如内建的int、float、bool 和其它类型。默认为id 函数。注意强制转换在输入验证结束后发生，所以它可能强制转换不在 choices 中的值<br><code>empty_value</code><br>    用于表示“空”的值。默认为空字符串；None 是另外一个常见的选项。注意这个值不会被coerce 参数中指定的函数强制转换，所以请根据情况进行选择</p>
<h4 id="DateField"><a href="#DateField" class="headerlink" title="DateField"></a><code>DateField</code></h4><p>Widget：<code>DateInput</code><br>错误信息的键：<code>required``invalid</code><br>接收一个可选参数<br><code>input_formats</code><br>一个格式的列表，用于转换一个字符串为<code>datateim.date</code>对象<br>默认为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[&apos;%Y-%m-%d&apos;,      # &apos;2006-10-25&apos;</div><div class="line">&apos;%m/%d/%Y&apos;,       # &apos;10/25/2006&apos;</div><div class="line">&apos;%m/%d/%y&apos;]       # &apos;10/25/06&apos;</div></pre></td></tr></table></figure></p>
<p>另外，如果你在设置中指定USE_L10N=False，以下的格式也将包含在默认的输入格式中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[&apos;%b %d %Y&apos;,      # &apos;Oct 25 2006&apos;</div><div class="line">&apos;%b %d, %Y&apos;,      # &apos;Oct 25, 2006&apos;</div><div class="line">&apos;%d %b %Y&apos;,       # &apos;25 Oct 2006&apos;</div><div class="line">&apos;%d %b, %Y&apos;,      # &apos;25 Oct, 2006&apos;</div><div class="line">&apos;%B %d %Y&apos;,       # &apos;October 25 2006&apos;</div><div class="line">&apos;%B %d, %Y&apos;,      # &apos;October 25, 2006&apos;</div><div class="line">&apos;%d %B %Y&apos;,       # &apos;25 October 2006&apos;</div><div class="line">&apos;%d %B, %Y&apos;]      # &apos;25 October, 2006&apos;</div></pre></td></tr></table></figure></p>
<h4 id="DateTimeField"><a href="#DateTimeField" class="headerlink" title="DateTimeField"></a><code>DateTimeField</code></h4><p>Widget：<code>DateTimeInput</code><br>错误信息的键：<code>required``invalid</code><br>接收一个可选参数<br><code>input_formats</code><br>一个格式的列表，用于转换一个字符串为<code>datetime.datetime</code>对象<br>默认为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[&apos;%Y-%m-%d %H:%M:%S&apos;,    # &apos;2006-10-25 14:30:59&apos;</div><div class="line">&apos;%Y-%m-%d %H:%M&apos;,        # &apos;2006-10-25 14:30&apos;</div><div class="line">&apos;%Y-%m-%d&apos;,              # &apos;2006-10-25&apos;</div><div class="line">&apos;%m/%d/%Y %H:%M:%S&apos;,     # &apos;10/25/2006 14:30:59&apos;</div><div class="line">&apos;%m/%d/%Y %H:%M&apos;,        # &apos;10/25/2006 14:30&apos;</div><div class="line">&apos;%m/%d/%Y&apos;,              # &apos;10/25/2006&apos;</div><div class="line">&apos;%m/%d/%y %H:%M:%S&apos;,     # &apos;10/25/06 14:30:59&apos;</div><div class="line">&apos;%m/%d/%y %H:%M&apos;,        # &apos;10/25/06 14:30&apos;</div><div class="line">&apos;%m/%d/%y&apos;]              # &apos;10/25/06&apos;</div></pre></td></tr></table></figure></p>
<h4 id="DecimalField"><a href="#DecimalField" class="headerlink" title="DecimalField"></a><code>DecimalField</code></h4><p>Widget：当<code>Field.localize</code>是<code>False</code>时为NumberInput，否则为<code>TextInput</code><br>错误信息的键：<code>required``invalid``max_value``min_digits``max_decimal_places``max_whole_digits</code><br><code>max_value</code>和<code>min_value</code>错误信息可能包含<code>%(limit_value)s</code>，它们将被真正的限制值替换。类似地，<code>max_digits</code>、<code>max_decimal_places</code>和 <code>max_whole_digits</code>错误消息可能包含<code>%(max)s</code><br>接收四个可选参数<br><code>max_value</code><br><code>min_value</code><br><code>max_digits</code>最大位数<br><code>decimal_places</code>最大小数位</p>
<h4 id="DurationField"><a href="#DurationField" class="headerlink" title="DurationField"></a><code>DurationField</code></h4><p>Widget：<code>TextInput</code><br>错误信息的键：<code>required``invalid</code></p>
<h4 id="EmailField"><a href="#EmailField" class="headerlink" title="EmailField"></a><code>EmailField</code></h4><p>Widget：<code>EmailInput</code><br>错误信息的键：<code>required``invalid</code><br>接收两个可选参数<br><code>max_length``min_length</code></p>
<h4 id="FileField"><a href="#FileField" class="headerlink" title="FileField"></a><code>FileField</code></h4><p>Widget：<code>ClearableFileInput</code><br>错误信息的键：<code>required``invalid``missing``empty``max_length</code><br>接收两个可选参数<br><code>max_length``allow_empty_file</code>如果提供，这两个参数确保文件名的最大长度，而且即使文件内容为空时验证也会成功<br><code>max_length</code>错误信息表示文件名的长度。在错误信息中，<code>%(max)d</code>将替换为文件的最大长度，%<code>(length)d</code> 将替换为当前文件名的长度</p>
<h4 id="FilePathField"><a href="#FilePathField" class="headerlink" title="FilePathField"></a><code>FilePathField</code></h4><p>Widget：<code>Select</code><br>错误信息的键：<code>required``invalid_choice</code><br>这个字段允许从一个特定的目录选择文件<br>接收五个参数<br><code>path</code><br>必须<br>想要列出的目录的绝对路径<br><code>recursive</code><br>可选<br>布尔值，默认为<code>False</code>，是否需要递归这个目录<br><code>match</code><br>可选<br>正则表达式表示一个模式，只有匹配这个表达式的名称才会允许作为选项<br><code>allow_files</code><br>可选<br>布尔值，默认为<code>True</code>，表示是否应该包含指定位置的文件，它和<code>allow_folders</code>必须有一个为<code>True</code><br><code>allow_folders</code><br>可选<br>布尔值，默认为<code>True</code>，表示是否应该包含指定位置的目录，和<code>allow_files</code>必须有一个为<code>True</code></p>
<h4 id="FloatField"><a href="#FloatField" class="headerlink" title="FloatField"></a><code>FloatField</code></h4><p>Widget：当<code>Field.localize</code>是False 时为<code>NumberInput</code>，否则为<code>TextInput</code><br>错误信息的键：<code>required``invalid``max_value``min_value</code><br>接收两个可选参数<br><code>max_value``min_value</code></p>
<h4 id="ImageField"><a href="#ImageField" class="headerlink" title="ImageField"></a><code>ImageField</code></h4><p>Widget：<code>ClearableFileInput</code><br>错误信息的键：<code>required``invalid``missing``empty``invalid_image</code></p>
<h4 id="IntegerField"><a href="#IntegerField" class="headerlink" title="IntegerField"></a><code>IntegerField</code></h4><p>Widget：当<code>Field.localize</code>是<code>False</code>时为<code>NumberInput</code>，否则为<code>TextInput</code><br>错误信息的键：<code>required``invalid``max_value``min_value</code><br>接收两个可选参数<br><code>max_value``min_value</code></p>
<h4 id="IPAddressField"><a href="#IPAddressField" class="headerlink" title="IPAddressField"></a><code>IPAddressField</code></h4><p>1.7弃用</p>
<h4 id="GenericIPAddressField"><a href="#GenericIPAddressField" class="headerlink" title="GenericIPAddressField"></a><code>GenericIPAddressField</code></h4><p>Widget：<code>TextInput</code><br>错误信息的键：<code>required``invalid</code><br>接收两个可选参数<br><code>protocol``unpack_ipv4</code></p>
<h4 id="MultipleChoiceField"><a href="#MultipleChoiceField" class="headerlink" title="MultipleChoiceField"></a><code>MultipleChoiceField</code></h4><p>Widget：<code>SelectMultiple</code><br>错误信息的键：<code>required``invalid_choice``invalid_list</code></p>
<h4 id="TypedMultipleChoiceField"><a href="#TypedMultipleChoiceField" class="headerlink" title="TypedMultipleChoiceField"></a><code>TypedMultipleChoiceField</code></h4><h4 id="NullBooleanField"><a href="#NullBooleanField" class="headerlink" title="NullBooleanField"></a><code>NullBooleanField</code></h4><h4 id="RegexField"><a href="#RegexField" class="headerlink" title="RegexField"></a><code>RegexField</code></h4><h4 id="SlugField"><a href="#SlugField" class="headerlink" title="SlugField"></a><code>SlugField</code></h4><h4 id="TimeField"><a href="#TimeField" class="headerlink" title="TimeField"></a><code>TimeField</code></h4><h4 id="URLField"><a href="#URLField" class="headerlink" title="URLField"></a><code>URLField</code></h4><h4 id="UUIDField"><a href="#UUIDField" class="headerlink" title="UUIDField"></a><code>UUIDField</code></h4><p>输出时需要<code>.hex</code></p>
<h4 id="ComboField"><a href="#ComboField" class="headerlink" title="ComboField"></a><code>ComboField</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.forms <span class="keyword">import</span> ComboField</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = ComboField(fields=[CharField(max_length=<span class="number">20</span>), EmailField()])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.clean(<span class="string">'test@example.com'</span>)</div><div class="line"><span class="string">'test@example.com'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.clean(<span class="string">'longemailaddress@example.com'</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">...</div><div class="line">ValidationError: [<span class="string">'Ensure this value has at most 20 characters (it has 28).'</span>]</div></pre></td></tr></table></figure>
<h4 id="MultiValueField"><a href="#MultiValueField" class="headerlink" title="MultiValueField"></a><code>MultiValueField</code></h4><h4 id="SplitDateTimeField"><a href="#SplitDateTimeField" class="headerlink" title="SplitDateTimeField"></a><code>SplitDateTimeField</code></h4><h4 id="ModelChoiceField"><a href="#ModelChoiceField" class="headerlink" title="ModelChoiceField"></a><code>ModelChoiceField</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># A custom empty label</span></div><div class="line">field1 = forms.ModelChoiceField(queryset=..., empty_label=<span class="string">"(Nothing)"</span>)</div><div class="line"> </div><div class="line"><span class="comment"># No empty label</span></div><div class="line">field2 = forms.ModelChoiceField(queryset=..., empty_label=<span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<h4 id="ModelMultipleChoiceField"><a href="#ModelMultipleChoiceField" class="headerlink" title="ModelMultipleChoiceField"></a><code>ModelMultipleChoiceField</code></h4><h2 id="Widgets"><a href="#Widgets" class="headerlink" title="Widgets"></a><a href="http://python.usyiyi.cn/django/ref/forms/widgets.html" target="_blank" rel="external">Widgets</a></h2><p>处理文本输入的Widget</p>
<ul>
<li><code>TextInput</code></li>
<li><code>NumberInput</code></li>
<li><code>EmailInput</code></li>
<li><code>URLInput</code></li>
<li><code>PasswordInput</code></li>
<li><code>HiddenInput</code></li>
<li><code>DateInput</code></li>
<li><code>DateTimeInput</code></li>
<li><code>TimeInput</code></li>
<li><code>Textarea</code></li>
</ul>
<p>选择和复选框Widget</p>
<ul>
<li><code>CheckboxInput</code></li>
<li><code>Select</code></li>
<li><code>NullBooleanSelect</code></li>
<li><code>SelectMultiple</code></li>
<li><code>RadioSelect</code></li>
<li><code>CheckboxSelectMultiple</code></li>
</ul>
<p>文件上传<code>Widget</code></p>
<ul>
<li><code>FileInput</code></li>
<li><code>ClearableFileInput</code></li>
</ul>
<p>复合Widget</p>
<ul>
<li><code>MultipleHiddenInput</code></li>
<li><code>SplitDateTimeWidget</code></li>
<li><code>SplitHiddenDateTimeWidget</code></li>
<li><code>SelectDateWidget</code></li>
</ul>
<h2 id="从模型创建表单"><a href="#从模型创建表单" class="headerlink" title="从模型创建表单"></a><a href="http://python.usyiyi.cn/django/topics/forms/modelforms.html" target="_blank" rel="external">从模型创建表单</a></h2><p>下面两种方法效果相同<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">author = Author(title=<span class="string">'Mr'</span>)</div><div class="line">form = PartialAuthorForm(request.POST, instance=author)</div><div class="line">form.save()</div><div class="line"><span class="comment"># or</span></div><div class="line">form = PartialAuthorForm(request.POST)</div><div class="line">author = form.save(commit=<span class="keyword">False</span>)</div><div class="line">author.title = <span class="string">'Mr'</span></div><div class="line">author.save()</div></pre></td></tr></table></figure></p>
<p>显式定义的字段不会从对于的模型中获取属性，例如 max_length 或required。 如果你希望保持模型中指定的行为，你必须设置在声明表单字段时显式设置相关的参数。</p>
<p>例如，如果Article 模型像下面这样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(models.Model)</span>:</span></div><div class="line">    headline = models.CharField(max_length=<span class="number">200</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>,</div><div class="line">                                help_text=<span class="string">"Use puns liberally"</span>)</div><div class="line">    content = models.TextField()</div></pre></td></tr></table></figure></p>
<p>而你想为headline 做一些自定义的验证，在保持blank 和help_text 值的同时，你必须定义这样定义ArticleForm：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleForm</span><span class="params">(ModelForm)</span>:</span></div><div class="line">    headline = MyFormField(max_length=<span class="number">200</span>, required=<span class="keyword">False</span>,</div><div class="line">                           help_text=<span class="string">"Use puns liberally"</span>)</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = Article</div><div class="line">        fields = [<span class="string">'headline'</span>, <span class="string">'content'</span>]</div></pre></td></tr></table></figure>
<p>创建简单的表单或表单集可以使用<code>modelform_factory()``modelformset_factory()</code>方法来新建。</p>
<p>启用字段的本地化功能¶</p>
<p>默认情况下，ModelForm 中的字段不会本地化它们的数据。你可以使用Meta 类的localized_fields 属性来启用字段的本地化功能。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.forms <span class="keyword">import</span> ModelForm</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Author</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">AuthorForm</span><span class="params">(ModelForm)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line"><span class="meta">... </span>        model = Author</div><div class="line"><span class="meta">... </span>        localized_fields = (<span class="string">'birth_date'</span>,)</div></pre></td></tr></table></figure></p>
<p>如果localized_fields 设置为<code>&#39;__all__&#39;</code>这个特殊的值，所有的字段都将本地化。</p>
<p>提供的初始值会覆盖从实例取得的值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>article = Article.objects.get(pk=<span class="number">1</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>article.headline</div><div class="line"><span class="string">'My headline'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>form = ArticleForm(initial=&#123;<span class="string">'headline'</span>: <span class="string">'Initial headline'</span>&#125;, instance=article)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>form[<span class="string">'headline'</span>].value()</div><div class="line"><span class="string">'Initial headline'</span></div></pre></td></tr></table></figure></p>
<p>如果不需要很多自定义，可以直接使用工厂方法来生成表单类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.forms.models <span class="keyword">import</span> modelform_factory</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Book</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>BookForm = modelform_factory(Book, fields=(<span class="string">"author"</span>, <span class="string">"title"</span>))</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.forms <span class="keyword">import</span> Textarea</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Form = modelform_factory(Book, form=BookForm,</div><div class="line"><span class="meta">... </span>                         widgets=&#123;<span class="string">"title"</span>: Textarea()&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>Form = modelform_factory(Author, form=AuthorForm, localized_fields=(<span class="string">"birth_date"</span>,))</div></pre></td></tr></table></figure>
<p>表单集<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.forms.models <span class="keyword">import</span> modelformset_factory</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Author</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>AuthorFormSet = modelformset_factory(Author, fields=(<span class="string">'name'</span>, <span class="string">'title'</span>))</div></pre></td></tr></table></figure></p>
<p>使用<code>model</code>生成的<code>formset</code>默认带一个包含全部对象的<code>queryset</code><br><code>formset``save()</code>之后，会有新的属性<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">models.BaseModelFormSet.changed_objects</div><div class="line">models.BaseModelFormSet.deleted_objects</div><div class="line">models.BaseModelFormSet.new_objects</div></pre></td></tr></table></figure></p>
<p><code>max_num</code>为最大的表单数，如果初始<code>queryset</code>长度比<code>max_num</code>，则按照<code>queryset</code>来，<code>extra</code>是可以额外添加的空表单的个数，但<code>extra</code>和<code>queryset</code>长度相加如果大于<code>max_num</code>，则<code>extra</code>和实例设置可能表现不一样，如<code>queryset</code>长度为2，<code>max_num</code>为4，<code>extra</code>不管是2还是5，最终表现出来都是2。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AuthorFormSet = modelformset_factory(Author, fields=(<span class="string">'name'</span>,), max_num=<span class="number">4</span>, extra=<span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<p><code>max_num</code>默认只影响显示，不影响验证，如果需要影响验证添加<code>validate_max=True</code>即可</p>
<h2 id="表单素材-Media-类"><a href="#表单素材-Media-类" class="headerlink" title="表单素材 ( Media 类)"></a><a href="http://python.usyiyi.cn/django/topics/forms/media.html" target="_blank" rel="external">表单素材 ( Media 类)</a></h2><p><strong><code>Form</code>和<code>Widget</code>都可以定义素材</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalendarWidget</span><span class="params">(forms.TextInput)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Media</span>:</span></div><div class="line">        css = &#123;</div><div class="line">            <span class="string">'all'</span>: (<span class="string">'pretty.css'</span>,)</div><div class="line">        &#125;</div><div class="line">        js = (<span class="string">'animations.js'</span>, <span class="string">'actions.js'</span>)</div></pre></td></tr></table></figure>
<p>使用<code>CalendarWidget</code>会自动引入下列资源<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://static.example.com/pretty.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"all"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://static.example.com/animations.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://static.example.com/actions.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>Widget</code>会默认继承父类的素材，如果不想继承在<code>Media</code>里使用<code>extend</code>禁止。</p>
<p>动态定义<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalendarWidget</span><span class="params">(forms.TextInput)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_media</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> forms.Media(css=&#123;<span class="string">'all'</span>: (<span class="string">'pretty.css'</span>,)&#125;,</div><div class="line">                           js=(<span class="string">'animations.js'</span>, <span class="string">'actions.js'</span>))</div><div class="line">    media = property(_media)</div></pre></td></tr></table></figure></p>
<p>两个<code>Media</code>实例可以相加<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from django import forms</div><div class="line">&gt;&gt;&gt; class CalendarWidget(forms.TextInput):</div><div class="line">...     class Media:</div><div class="line">...         css = &#123;</div><div class="line">...             'all': ('pretty.css',)</div><div class="line">...         &#125;</div><div class="line">...         js = ('animations.js', 'actions.js')</div><div class="line"> </div><div class="line">&gt;&gt;&gt; class OtherWidget(forms.TextInput):</div><div class="line">...     class Media:</div><div class="line">...         js = ('whizbang.js',)</div><div class="line"> </div><div class="line">&gt;&gt;&gt; w1 = CalendarWidget()</div><div class="line">&gt;&gt;&gt; w2 = OtherWidget()</div><div class="line">&gt;&gt;&gt; print(w1.media + w2.media)</div><div class="line">&lt;link href="http://static.example.com/pretty.css" type="text/css" media="all" rel="stylesheet" /&gt;</div><div class="line">&lt;script type="text/javascript" src="http://static.example.com/animations.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script type="text/javascript" src="http://static.example.com/actions.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script type="text/javascript" src="http://static.example.com/whizbang.js"&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>表单<code>Media</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; class ContactForm(forms.Form):</div><div class="line">...     date = DateField(widget=CalendarWidget)</div><div class="line">...     name = CharField(max_length=40, widget=OtherWidget)</div><div class="line">...</div><div class="line">...     class Media:</div><div class="line">...         css = &#123;</div><div class="line">...             'all': ('layout.css',)</div><div class="line">...         &#125;</div><div class="line"> </div><div class="line">&gt;&gt;&gt; f = ContactForm()</div><div class="line">&gt;&gt;&gt; f.media</div><div class="line">&lt;link href="http://static.example.com/pretty.css" type="text/css" media="all" rel="stylesheet" /&gt;</div><div class="line">&lt;link href="http://static.example.com/layout.css" type="text/css" media="all" rel="stylesheet" /&gt;</div><div class="line">&lt;script type="text/javascript" src="http://static.example.com/animations.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script type="text/javascript" src="http://static.example.com/actions.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script type="text/javascript" src="http://static.example.com/whizbang.js"&gt;&lt;/script</div></pre></td></tr></table></figure></p>
<h2 id="表单集"><a href="#表单集" class="headerlink" title="表单集"></a><a href="http://python.usyiyi.cn/django/topics/forms/formsets.html" target="_blank" rel="external">表单集</a></h2><p>表单集控制<br><code>max_num</code><br><code>min_num</code><br><code>validate_max</code><br><code>validate_min</code><br><code>can_order</code><br><code>can_delete</code></p>
<p>其中<code>can_order``can_delete</code>默认以以下形式展现</p>
<p>如果是使用<code>Model</code>生成的表单集，如果<code>delete</code>后，在调用<code>formset.save()</code>会自动删除相应的数据，但如果调用了<code>formset.save(commit=False)</code>，则需要手动删除（1.6或更早版还是会自动删除）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>instances = formset.save(commit=<span class="keyword">False</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> obj <span class="keyword">in</span> formset.deleted_objects:</div><div class="line"><span class="meta">... </span>    obj.delete()</div></pre></td></tr></table></figure></p>
<p>如果要兼容1.6或更早版，可以这么写<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>    <span class="comment"># For Django 1.7+</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>    <span class="keyword">for</span> obj <span class="keyword">in</span> formset.deleted_objects:</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>        obj.delete()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">except</span> AssertionError:</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>    <span class="comment"># Django 1.6 and earlier already deletes the objects, trying to</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>    <span class="comment"># delete them a second time raises an AssertionError.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>在表单集里添加额外的字段<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from django.forms.formsets import BaseFormSet</div><div class="line">&gt;&gt;&gt; from django.forms.formsets import formset_factory</div><div class="line">&gt;&gt;&gt; from myapp.forms import ArticleForm</div><div class="line">&gt;&gt;&gt; class BaseArticleFormSet(BaseFormSet):</div><div class="line">...     def add_fields(self, form, index):</div><div class="line">...         super(BaseArticleFormSet, self).add_fields(form, index)</div><div class="line">...         form.fields["my_field"] = forms.CharField()</div><div class="line"> </div><div class="line">&gt;&gt;&gt; ArticleFormSet = formset_factory(ArticleForm, formset=BaseArticleFormSet)</div><div class="line">&gt;&gt;&gt; formset = ArticleFormSet()</div><div class="line">&gt;&gt;&gt; for form in formset:</div><div class="line">...     print(form.as_table())</div><div class="line">&lt;tr&gt;&lt;th&gt;&lt;label for="id_form-0-title"&gt;Title:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;input type="text" name="form-0-title" id="id_form-0-title" /&gt;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">&lt;tr&gt;&lt;th&gt;&lt;label for="id_form-0-pub_date"&gt;Pub date:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;input type="text" name="form-0-pub_date" id="id_form-0-pub_date" /&gt;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">&lt;tr&gt;&lt;th&gt;&lt;label for="id_form-0-my_field"&gt;My field:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;input type="text" name="form-0-my_field" id="id_form-0-my_field" /&gt;&lt;/td&gt;&lt;/tr&gt;</div></pre></td></tr></table></figure></p>
<p>表单集对应的模版写法<br><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">        <span class="template-variable">&#123;&#123; formset &#125;&#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>也可以手动渲染，不能缺少<code></code><br><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span></div><div class="line">    <span class="template-variable">&#123;&#123; formset.management_form &#125;&#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">        <span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> form <span class="keyword">in</span> formset</span></div><div class="line">        &#123;&#123; form &#125;&#125;</div><div class="line">        &#123;% endfor</div><div class="line">    &lt;/table&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<p>如果是手动渲染，<code>can_order``can_delete</code>需要手动添加<br><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span></div><div class="line">    <span class="template-variable">&#123;&#123; formset.management_form &#125;&#125;</span><span class="xml"></span></div><div class="line">    <span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> form <span class="keyword">in</span> formset</span></div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li&gt;&#123;&#123; form.title &#125;&#125;&lt;/li&gt;</div><div class="line">            &lt;li&gt;&#123;&#123; form.pub_date &#125;&#125;&lt;/li&gt;</div><div class="line">            &#123;% if formset.can_delete</div><div class="line">                &lt;li&gt;&#123;&#123; form.DELETE &#125;&#125;&lt;/li&gt;</div><div class="line">            &#123;% endif</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &#123;% endfor</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<p>在一个视图中使用多个<code>FormSet</code>需要回前缀<code>prefix</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.forms.formsets <span class="keyword">import</span> formset_factory</div><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response</div><div class="line"><span class="keyword">from</span> myapp.forms <span class="keyword">import</span> ArticleForm, BookForm</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">manage_articles</span><span class="params">(request)</span>:</span></div><div class="line">    ArticleFormSet = formset_factory(ArticleForm)</div><div class="line">    BookFormSet = formset_factory(BookForm)</div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        article_formset = ArticleFormSet(request.POST, request.FILES, prefix=<span class="string">'articles'</span>)</div><div class="line">        book_formset = BookFormSet(request.POST, request.FILES, prefix=<span class="string">'books'</span>)</div><div class="line">        <span class="keyword">if</span> article_formset.is_valid() <span class="keyword">and</span> book_formset.is_valid():</div><div class="line">            <span class="comment"># do something with the cleaned_data on the formsets.</span></div><div class="line">            <span class="keyword">pass</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        article_formset = ArticleFormSet(prefix=<span class="string">'articles'</span>)</div><div class="line">        book_formset = BookFormSet(prefix=<span class="string">'books'</span>)</div><div class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'manage_articles.html'</span>, &#123;</div><div class="line">        <span class="string">'article_formset'</span>: article_formset,</div><div class="line">        <span class="string">'book_formset'</span>: book_formset,</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p>
<h2 id="表单验证和字段验证"><a href="#表单验证和字段验证" class="headerlink" title="表单验证和字段验证"></a><a href="http://python.usyiyi.cn/django/ref/forms/validation.html" target="_blank" rel="external">表单验证和字段验证</a></h2><p>格式标准<br>抛出单个错误<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">raise</span> ValidationError(</div><div class="line">    _(<span class="string">'Invalid value: %(value)s'</span>),</div><div class="line">    code=<span class="string">'invalid'</span>,</div><div class="line">    params=&#123;<span class="string">'value'</span>: <span class="string">'42'</span>&#125;,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>招聘多个错误<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Good</span></div><div class="line"><span class="keyword">raise</span> ValidationError([</div><div class="line">    ValidationError(_(<span class="string">'Error 1'</span>), code=<span class="string">'error1'</span>),</div><div class="line">    ValidationError(_(<span class="string">'Error 2'</span>), code=<span class="string">'error2'</span>),</div><div class="line">])</div><div class="line"> </div><div class="line"><span class="comment"># Bad</span></div><div class="line"><span class="keyword">raise</span> ValidationError([</div><div class="line">    _(<span class="string">'Error 1'</span>),</div><div class="line">    _(<span class="string">'Error 2'</span>),</div><div class="line">])</div></pre></td></tr></table></figure></p>
<p>创建一个新的表单字段添加默认验证<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</div><div class="line"><span class="keyword">from</span> django.core.validators <span class="keyword">import</span> validate_email</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiEmailField</span><span class="params">(forms.Field)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="string">"Normalize data to a list of strings."</span></div><div class="line"> </div><div class="line">        <span class="comment"># Return an empty list if no input was given.</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> value:</div><div class="line">            <span class="keyword">return</span> []</div><div class="line">        <span class="keyword">return</span> value.split(<span class="string">','</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="string">"Check if value consists only of valid emails."</span></div><div class="line"> </div><div class="line">        <span class="comment"># Use the parent's handling of required fields, etc.</span></div><div class="line">        super(MultiEmailField, self).validate(value)</div><div class="line"> </div><div class="line">        <span class="keyword">for</span> email <span class="keyword">in</span> value:</div><div class="line">            validate_email(email)</div></pre></td></tr></table></figure></p>
<h2 id="Django-的设置"><a href="#Django-的设置" class="headerlink" title="Django 的设置"></a><a href="http://python.usyiyi.cn/django/topics/settings.html" target="_blank" rel="external">Django 的设置</a></h2><p>django-admin 工具</p>
<p>当使用django-admin 时， 你可以设置只设置环境变量一次，或者每次运行该工具时显式传递设置模块。</p>
<p>例如（Unix Bash shell）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export DJANGO_SETTINGS_MODULE=mysite.settings</div><div class="line">django-admin runserver</div></pre></td></tr></table></figure></p>
<p>例如（Windows shell）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">set DJANGO_SETTINGS_MODULE=mysite.settings</div><div class="line">django-admin runserver</div></pre></td></tr></table></figure></p>
<p>使用–settings 命令行参数可以手工指定设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">django-admin runserver --settings=mysite.settings</div></pre></td></tr></table></figure></p>
<p>使用下面的命令可以查询设置与默认设置的不同<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py diffsettings</div></pre></td></tr></table></figure></p>
<p>在django app中使用设置应使用以下导入方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</div></pre></td></tr></table></figure></p>
<p>注意，django.conf.settings 不是一个模块 —— 它是一个对象。所以不可以导入每个单独的设置：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.settings <span class="keyword">import</span> DEBUG  <span class="comment"># This won't work.</span></div></pre></td></tr></table></figure></p>
<p>不要在应用运行时改变设置</p>
<h2 id="完整列表设置-Settings"><a href="#完整列表设置-Settings" class="headerlink" title="完整列表设置(Settings)"></a><a href="http://python.usyiyi.cn/django/ref/settings.html" target="_blank" rel="external">完整列表设置(Settings)</a></h2><p><code>CSRF_COOKIE_SECURE=True</code>只通过<code>HTTPS</code>传递<code>cookie</code></p>
<p><code>DATABASES[&#39;CONN_MAX_AGE&#39;]</code>数据库连接的戚时间，默认为0（历史遗留行为），设置为<code>None</code>表示无限的持久连接<br><code>DECIMAL_SEPARATOR</code>类型数据的分隔符默认为点<code>.</code><br><code>DISALLOWED_USER_AGENTS</code>编写正则表达式元组禁用代码访问，需要启用<code>CommonMiddleware</code>中间件<br><code>INTERNAL_IPS</code>设置公司内容的ip，在些ip列表中的ip可以访问admindoc下的书签</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a><a href="http://python.usyiyi.cn/django_182/ref/applications.html" target="_blank" rel="external">应用</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># rock_n_roll/apps.py</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> AppConfig</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RockNRollConfig</span><span class="params">(AppConfig)</span>:</span></div><div class="line">    name = <span class="string">'rock_n_roll'</span></div><div class="line">    verbose_name = <span class="string">"Rock ’n’ roll"</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># rock_n_roll/__init__.py</span></div><div class="line"> </div><div class="line">default_app_config = <span class="string">'rock_n_roll.apps.RockNRollConfig'</span></div></pre></td></tr></table></figure>
<p><code>AppConfig</code>可配置的属性</p>
<ul>
<li><code>AppConfig.name</code></li>
<li><code>AppConfig.label</code></li>
<li><code>AppConfig.verbose_name</code></li>
<li><code>Appconfig.path</code></li>
</ul>
<p><code>AppConfig</code>只读属性</p>
<ul>
<li><code>AppConfig.module</code></li>
<li><code>Appconfig.models_module</code></li>
</ul>
<p><code>AppConfig</code>方法</p>
<ul>
<li><code>AppConfig.get_models()</code></li>
<li><code>AppConfig..get_model(model_name)</code></li>
<li><code>AppConfigevaluate.ready()</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.apps <span class="keyword">import</span> apps</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>apps.get_app_config(<span class="string">'admin'</span>).verbose_name</div><div class="line"><span class="string">'Admin'</span></div></pre></td></tr></table></figure>
<p><code>APP</code></p>
<ul>
<li><code>apps.ready</code></li>
<li><code>apps.get_app_configs()</code></li>
<li><code>apps.get_app_config(app_label)</code></li>
<li><code>apps.is_installed(app_name)</code></li>
<li><code>apps.get_model(app_label, model_name)</code></li>
</ul>
<h2 id="Django异常"><a href="#Django异常" class="headerlink" title="Django异常"></a><a href="python.usyiyi.cn/django_182/ref/exceptions.html">Django异常</a></h2><h3 id="核心异常"><a href="#核心异常" class="headerlink" title="核心异常"></a>核心异常</h3><p><em><code>django.core.exceptions</code></em></p>
<ul>
<li><code>ObjectDoesNotExist</code><br>对象不存在<br><code>DoesNotExist</code>的基类<br>对ObjectDoesNotExist的try/except会为所有模型捕获到所有DoesNotExist 异常<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ObjectDoesNotExist</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    e = Entry.objects.get(id=<span class="number">3</span>)</div><div class="line">    b = Blog.objects.get(id=<span class="number">1</span>)</div><div class="line"><span class="keyword">except</span> ObjectDoesNotExist:</div><div class="line">    print(<span class="string">"Either the entry or blog doesn't exist."</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><code>FieldDoesNotExist</code><br>当被请求的字段在模型或模型的父类中不存在时，<code>FieldDoesNotExist</code>异常由模型的 <code>_meta.get_field()</code>方法抛出</p>
</li>
<li><p><code>MultipleObjectsReturned</code><br>查询时，预期只有一个对象，但是返回了多个对象会抛出此异常</p>
</li>
<li><p><code>SuspiciousOperation</code><br>当用户进行的操作在安全方面可疑的时候，抛出此异常，例如，篡改<code>cookie</code><br>子类</p>
<ul>
<li><code>DisallowedHost</code></li>
<li><code>DisallowedModelAdminLookup</code></li>
<li><code>DisallowedModelAdminToField</code></li>
<li><code>DisallowedRedirect</code></li>
<li><code>InvalidSessionKey</code></li>
<li><code>SuspiciousFileOperation</code></li>
<li><code>SuspiciousMultipartForm</code></li>
<li><code>SuspiciousSession</code></li>
</ul>
</li>
<li><p><code>PermissionDenied</code><br>当用户不被允许来执行请求的操作时产生</p>
</li>
<li><p><code>ViewDoesNotExist</code><br>当请求的视图不存在时抛出此异常</p>
</li>
<li><p><code>MiddlewareNotUsed</code><br>当中间件没有在服务器配置中出现时，抛出此异常</p>
</li>
<li><p><code>ImproperlyConfigured</code><br>django配置不当时抛出此异常，如<code>settings.py</code>中的值不正确或者不可解析</p>
</li>
<li><p><code>FieldError</code><br>当模型上的字段出现问题时，抛出此异常，由以下原因造成：</p>
<ul>
<li>模型中的字段与抽象基类中的字段重名</li>
<li>排序造成了一个死循环</li>
<li>关键词不能由过滤器参数解析</li>
<li>字段不能由查询参数中的关键词决定</li>
<li>连接（join）不能在指定对象上使用</li>
<li>字段名称不可用</li>
<li><p>查询包含了无效的<code>order_by</code>参数</p>
</li>
<li><p><code>ValidationError</code><br>当表单或模型字段验证失败时抛出此异常</p>
</li>
</ul>
</li>
<li><p><code>NON_FIELD_ERRORS</code><br>在表单或者模型中不属于特定字段的<code>ValidationError</code>被归类为<code>NON_FIELD_ERRORS</code></p>
</li>
</ul>
<h3 id="URL解析器异常"><a href="#URL解析器异常" class="headerlink" title="URL解析器异常"></a>URL解析器异常</h3><ul>
<li><p><code>Resolver404</code><br><code>django.http.Http404</code>的子类<br>当向<code>resolve</code>传递的路径不能匹配到对应视图时抛出此异常</p>
</li>
<li><p><code>NoReverseMatch</code><br>当你的URLconf中的一个匹配的URL不能基于提供的参数识别时，抛出此异常</p>
</li>
</ul>
<h3 id="数据库异常"><a href="#数据库异常" class="headerlink" title="数据库异常"></a>数据库异常</h3><p>数据库异常由django.db导入</p>
<ul>
<li><code>Error</code></li>
<li><code>InterfaceError</code></li>
<li><code>DatabaseError</code></li>
<li><code>DataError</code></li>
<li><code>OperationalError</code></li>
<li><code>IntegrityError</code></li>
<li><code>InternalError</code></li>
<li><code>ProgrammingError</code></li>
<li><code>NotSupportedError</code></li>
</ul>
<h3 id="HTTP异常"><a href="#HTTP异常" class="headerlink" title="HTTP异常"></a>HTTP异常</h3><p>HTTP异常由django.http导入</p>
<ul>
<li><code>UnreadablePostError</code><br>用户取消上传时抛出此异常</li>
</ul>
<h3 id="事务异常"><a href="#事务异常" class="headerlink" title="事务异常"></a>事务异常</h3><p>事务异常定义由<code>django.db.transaction</code>导入</p>
<h3 id="测试框架异常"><a href="#测试框架异常" class="headerlink" title="测试框架异常"></a>测试框架异常</h3><p>由DJango django.test 包提供的异常</p>
<ul>
<li><code>RedirectCycleError</code><br>当测试客户端检测到重定向的循环或者过长的链时抛出此异常</li>
</ul>
<h3 id="Python异常"><a href="#Python异常" class="headerlink" title="Python异常"></a><code>Python</code>异常</h3><p>Django在适当的时候也会抛出Python的内建异常</p>
<h2 id="django-admin-and-manage-py"><a href="#django-admin-and-manage-py" class="headerlink" title="django-admin and manage.py"></a><a href="http://python.usyiyi.cn/django_182/ref/django-admin.html" target="_blank" rel="external">django-admin and manage.py</a></h2><ul>
<li><p><code>dumpdata</code><br>该命令将所有与被命名应用相关联的数据库中的数据输出到标准输出。<br>如果在dumpdate命令后面未指定Django应用名，则Django项目中安装的所有应用的数据都将被dump到fixture中<br><code>dumpdata --output data.json</code></p>
</li>
<li><p><code>flus</code><br>清空数据库，重新装载初始数据</p>
</li>
<li><code>--noinput</code></li>
<li><code>--database</code></li>
<li><code>--no-initial-data</code></li>
</ul>
<ul>
<li><code>inspectdb</code><br>根据数据库结构生成model<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py inspectdb &gt; models.py</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><code>loaddata</code><br>导入fixture数据</p>
</li>
<li><p><code>runserver</code><br>启动本地上一个轻量级的Web服务器，默认多线程<br><code>--noreload</code>禁用自动重新载入<br><code>--nothreading</code>禁用多线程</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">runserver <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">80</span></div></pre></td></tr></table></figure>
<h2 id="添加自定义的命令"><a href="#添加自定义的命令" class="headerlink" title=" 添加自定义的命令"></a><a href="http://python.usyiyi.cn/django_182/howto/custom-management-commands.html" target="_blank" rel="external"> 添加自定义的命令</a></h2><p>向应用下添加management/commands目录，Django会为此目录下的所有没有带下划线开头的python模块都注册一个<code>manage.py</code>命令。<br>在Python 2上，请确保management和management/commands两个目录都包含<code>__init__.py</code> 文件。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.core.management.base <span class="keyword">import</span> BaseCommand, CommandError</div><div class="line"><span class="keyword">from</span> polls.models <span class="keyword">import</span> Poll</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span><span class="params">(BaseCommand)</span>:</span></div><div class="line">    help = <span class="string">'Closes the specified poll for voting'</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_arguments</span><span class="params">(self, parser)</span>:</span></div><div class="line">        <span class="comment"># 命令行接收一个或多个poll_id值</span></div><div class="line">        <span class="comment">#</span></div><div class="line">        parser.add_argument(<span class="string">'poll_id'</span>, nargs=<span class="string">'+'</span>, type=int)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self, *args, **options)</span>:</span></div><div class="line">        <span class="keyword">for</span> poll_id <span class="keyword">in</span> options[<span class="string">'poll_id'</span>]:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                poll = Poll.objects.get(pk=poll_id)</div><div class="line">            <span class="keyword">except</span> Poll.DoesNotExist:</div><div class="line">                <span class="keyword">raise</span> CommandError(<span class="string">'Poll "%s" does not exist'</span> % poll_id)</div><div class="line"> </div><div class="line">            poll.opened = <span class="keyword">False</span></div><div class="line">            poll.save()</div><div class="line"> </div><div class="line">            self.stdout.write(<span class="string">'Successfully closed poll "%s"'</span> % poll_id)</div></pre></td></tr></table></figure>
<p><img src="http://iblogc.qiniudn.com/2017-02-09-django-commands.png" alt="django-commands"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br/&gt;&lt;br&gt;
    
    </summary>
    
      <category term="程序猿" scheme="http://me.iblogc.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
    
      <category term="django" scheme="http://me.iblogc.com/tags/django/"/>
    
      <category term="文档" scheme="http://me.iblogc.com/tags/%E6%96%87%E6%A1%A3/"/>
    
      <category term="笔记" scheme="http://me.iblogc.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Django REST framework之版本号version</title>
    <link href="http://me.iblogc.com/2016/01/28/django-rest-framework%E4%B9%8B%E7%89%88%E6%9C%AC%E5%8F%B7version/"/>
    <id>http://me.iblogc.com/2016/01/28/django-rest-framework之版本号version/</id>
    <published>2016-01-28T15:29:58.000Z</published>
    <updated>2016-12-17T07:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><a id="more"></a><br>drf支持以下形式传输版本号</p>
<ul>
<li><p>header</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET /bookings/ HTTP/1.1</div><div class="line">Host: example.com</div><div class="line">Accept: application/json; version=1.0</div></pre></td></tr></table></figure>
</li>
<li><p>URL Path </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET /v1/bookings/ HTTP/1.1</div><div class="line">Host: example.com</div><div class="line">Accept: application/json</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">urlpatterns = [</div><div class="line">    url(</div><div class="line">        r&apos;^(?P&lt;version&gt;(v1|v2))/bookings/$&apos;,</div><div class="line">        bookings_list,</div><div class="line">        name=&apos;bookings-list&apos;</div><div class="line">    ),</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
<li><p>Namespace</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET /v1/something/ HTTP/1.1</div><div class="line">Host: example.com</div><div class="line">Accept: application/json</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">urlpatterns = [</div><div class="line">    url(r&apos;^v1/bookings/&apos;, include(&apos;bookings.urls&apos;, namespace=&apos;v1&apos;)),</div><div class="line">    url(r&apos;^v2/bookings/&apos;, include(&apos;bookings.urls&apos;, namespace=&apos;v2&apos;))</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
<li><p>Host Name</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET /bookings/ HTTP/1.1</div><div class="line">Host: v1.example.com</div><div class="line">Accept: application/json</div></pre></td></tr></table></figure>
</li>
<li><p>Query Parameter</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET /something/?version=0.1 HTTP/1.1</div><div class="line">Host: example.com</div><div class="line">Accept: application/json</div></pre></td></tr></table></figure>
</li>
</ul>
<p>drf默认是关闭版本控制功能，如需要开启，可在<code>settings.py</code>里添加对应的设置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    ……</div><div class="line">    <span class="string">'DEFAULT_VERSIONING_CLASS'</span>: <span class="string">'rest_framework.versioning.AcceptHeaderVersioning'</span>,</div><div class="line">    <span class="comment"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',</span></div><div class="line">    <span class="comment"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',</span></div><div class="line">    <span class="comment"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.HostNameVersioning',</span></div><div class="line">    <span class="comment"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.QueryParameterVersioning',</span></div><div class="line">    ……</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当然，你也可以为每个视图单独添加，不过不建议这么做<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileList</span><span class="params">(APIView)</span>:</span></div><div class="line">    versioning_class = versioning.QueryParameterVersioning</div></pre></td></tr></table></figure></p>
<p>开启版本控制之后，就可以从<code>request</code>取得版本号<code>request.version</code>（当然你<code>settings.py</code>里配置的是什么方式，就用什么方式传版本号，这样就才可以从<code>request</code>里获取到版本号）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">if</span> self.request.version == <span class="string">'v1'</span>:</div><div class="line">        <span class="keyword">return</span> AccountSerializerVersion1</div><div class="line">    <span class="keyword">return</span> AccountSerializer</div></pre></td></tr></table></figure></p>
<p>启动版本控制后，url逆向解析方法需要传入<code>request</code>参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework.reverse <span class="keyword">import</span> reverse</div><div class="line"> </div><div class="line">reverse(<span class="string">'bookings-list'</span>, request=request)</div></pre></td></tr></table></figure></p>
<p>如果是使用Namespace时的版本控制，因为配置了<code>DEFAULT_VERSIONING_CLASS</code>，所以设置view_name时不需要添加<code>v1:</code>前缀，见django rest framework入门笔记.md</p>
<p>最后在设置里添加以下全局设置来控制能访问的版本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'DEFAULT_VERSION'</span>: <span class="keyword">None</span>, <span class="comment">#默认版本，request里没有版本信息时，使用的版本，默认为None</span></div><div class="line"><span class="string">'ALLOWED_VERSIONS'</span>: [<span class="keyword">None</span>, <span class="string">'v1'</span>, <span class="string">'v2'</span>], <span class="comment">#允许访问的版本，如果访问的版本不在列表中，则会抛出异常</span></div></pre></td></tr></table></figure></p>
<p>也可以为每个视图单独设置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework.versioning <span class="keyword">import</span> URLPathVersioning</div><div class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleVersioning</span><span class="params">(URLPathVersioning)</span>:</span></div><div class="line">    default_version = ...</div><div class="line">    allowed_versions = ...</div><div class="line">    version_param = ...</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleView</span><span class="params">(APIVIew)</span>:</span></div><div class="line">    versioning_class = ExampleVersioning</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br /&gt;&lt;br&gt;
    
    </summary>
    
      <category term="程序猿" scheme="http://me.iblogc.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
    
      <category term="django" scheme="http://me.iblogc.com/tags/django/"/>
    
      <category term="restful" scheme="http://me.iblogc.com/tags/restful/"/>
    
      <category term="api" scheme="http://me.iblogc.com/tags/api/"/>
    
      <category term="version" scheme="http://me.iblogc.com/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>curl常用命令</title>
    <link href="http://me.iblogc.com/2015/12/17/curl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://me.iblogc.com/2015/12/17/curl常用命令/</id>
    <published>2015-12-17T13:29:29.000Z</published>
    <updated>2016-12-08T15:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。<br><a id="more"></a></p>
<h3 id="访问url并输出结果"><a href="#访问url并输出结果" class="headerlink" title="访问url并输出结果"></a>访问url并输出结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http://www.example.com</div></pre></td></tr></table></figure>
<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><p>默认curl使用GET方式请求数据，这种方式下直接通过URL传递数据<br>可以通过 –data/-d 方式指定使用POST方式传递数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># GET</div><div class="line">curl -u username https://api.github.com/user?access_token=XXXXXXXXXX</div><div class="line"></div><div class="line"># POST</div><div class="line">curl -u username -d &quot;param1=value1&amp;param2=value&quot; https://api.github.com</div><div class="line"></div><div class="line"># 也可以指定一个文件，将该文件中的内容当作数据传递给服务器端</div><div class="line">curl -d @filename https://github.api.com/authorizations</div></pre></td></tr></table></figure></p>
<p>注：默认情况下，通过POST方式传递过去的数据中若有特殊字符，首先需要将特殊字符转义在传递给服务器端，如value值中包含有空格，则需要先将空格转换成%20，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -d &quot;value%201&quot; http://hostname.com</div></pre></td></tr></table></figure></p>
<p>在新版本的CURL中，提供了新的选项 –data-urlencode，通过该选项提供的参数会自动转义特殊字符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl --data-urlencode &quot;value 1&quot; http://hostname.com</div></pre></td></tr></table></figure></p>
<h3 id="指定请求方式"><a href="#指定请求方式" class="headerlink" title="指定请求方式"></a>指定请求方式</h3><p>除了使用GET和POST协议外，还可以通过 -X 选项指定其它协议，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -I -X DELETE https://api.github.com</div></pre></td></tr></table></figure></p>
<h3 id="设置请求头信息"><a href="#设置请求头信息" class="headerlink" title="设置请求头信息"></a>设置请求头信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -H &apos;Accept-Language: zh&apos; http://cnn.com</div></pre></td></tr></table></figure>
<p><code>-H</code>或被多次指定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -H &apos;Host: 157.166.226.25&apos;-H &apos;Accept-Language: zh&apos;-H &apos;Cookie: ID=1234&apos; http://cnn.com</div></pre></td></tr></table></figure></p>
<p>对于”User-Agent”, “Cookie”, “Host”这类标准的HTTP头部字段，通常会有另外一种设置方法。curl命令提供了特定的选项来对这些头部字段进行设置：<br>-A (or –user-agent): 设置 “User-Agent” 字段.<br>-b (or –cookie): 设置 “Cookie” 字段.<br>-e (or –referer): 设置 “Referer” 字段.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -H &quot;User-Agent: my browser&quot; http://cnn.com</div><div class="line">curl -A &quot;my browser&quot; http://cnn.com</div></pre></td></tr></table></figure></p>
<h3 id="查看响应头信息"><a href="#查看响应头信息" class="headerlink" title="查看响应头信息"></a>查看响应头信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -I http://www.baidu.com</div></pre></td></tr></table></figure>
<h3 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl --form &quot;fileupload=@filename.txt&quot; http://hostname/resource</div></pre></td></tr></table></figure>
<h3 id="访问url并奖结果保存到本地文件中"><a href="#访问url并奖结果保存到本地文件中" class="headerlink" title="访问url并奖结果保存到本地文件中"></a>访问url并奖结果保存到本地文件中</h3><p><code>-o</code>: 将文件保存为命令行中指定的文件名到本地<br><code>-O</code>: 使用url中默认的文件名保存文件到本地<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">curl -o index.html http://www.example.com</div><div class="line"># 或</div><div class="line">curl  http://www.baidu.com &gt; index.html</div><div class="line"># 在windows上没成功</div><div class="line">curl -O http://www.example.com</div></pre></td></tr></table></figure></p>
<h3 id="忽略证书错误"><a href="#忽略证书错误" class="headerlink" title="忽略证书错误"></a>忽略证书错误</h3><p>工作中，经常需要用自签的假证书搭建开发环境。cURL在遇到证书错误时罢工，使用 -k 参数就可以让它不做证书校验。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -k https://www.example.com</div></pre></td></tr></table></figure></p>
<h3 id="获取重定向后的页面"><a href="#获取重定向后的页面" class="headerlink" title="获取重定向后的页面"></a>获取重定向后的页面</h3><p>如果url重定向的话，curl默认是不会去获取重定向后的url页面的，使用<code>-L</code>可进行强制重定向<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L http://www.example.com</div></pre></td></tr></table></figure></p>
<h3 id="发送压缩的请求"><a href="#发送压缩的请求" class="headerlink" title="发送压缩的请求"></a>发送压缩的请求</h3><p>cURL提供了一个 –compress 参数，可以用来发送支持压缩的请求。但使用了–compress之后，虽然传输过程是压缩的，cURL的输出还是解压之后的，难以看到效果。</p>
<p>自己写一个 Accept-Encoding 字段在头信息中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -H &quot;Accept-Encoding: gzip&quot; http://www.kuqin.com/</div></pre></td></tr></table></figure></p>
<p>如果直接运行上面的命令，会得到一堆乱码，因为cURL输出的内容，是压缩后的数据。不妨在后面接一个gunzip试试。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 使用gunzip解压</div><div class="line">curl -H &quot;Accept-Encoding: gzip&quot; http://www.kuqin.com/ | gunzip</div></pre></td></tr></table></figure></p>
<p>使用gunzip解压之后，信息又被还原了。</p>
<h3 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h3><p>通过使用-C选项可对大文件使用断点续传功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 未下载完成即中断该进程</div><div class="line">curl -o a.zip http://www.example.com/bigfile.zip</div><div class="line"></div><div class="line"># 后面可以通过-C来继续下载</div><div class="line">curl -C -o a.html http://www.example.com/bigfile.zip</div></pre></td></tr></table></figure></p>
<h3 id="下载限速"><a href="#下载限速" class="headerlink" title="下载限速"></a>下载限速</h3><p>使用-limit-rate进行限速<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 限速为100k/s</div><div class="line">curl --limit-rate 1000k -o a.zip http://www.example.com/bigfile.zip</div></pre></td></tr></table></figure></p>
<h3 id="根据文件修改时间来判断是否进行下载"><a href="#根据文件修改时间来判断是否进行下载" class="headerlink" title="根据文件修改时间来判断是否进行下载"></a>根据文件修改时间来判断是否进行下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 若文件的修改时间在2011/12/11之后，则下载</div><div class="line">curl -z 21-Dec-11 http://www.example.com/bigfile.zip</div></pre></td></tr></table></figure>
<h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>在访问需要授权的页面时，可通过<code>-u</code>来提供用户名和密码进行授权<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -u username:password http://www.example.com</div></pre></td></tr></table></figure></p>
<h3 id="ftp操作"><a href="#ftp操作" class="headerlink" title="ftp操作"></a>ftp操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># 列出指定目录下的所有文件</div><div class="line">curl -u ftpuser:ftppw -O ftp://ftp_server/public_html/</div><div class="line"></div><div class="line"># 下载文件</div><div class="line">curl -u ftpuser:ftppw -O</div><div class="line">ftp://ftp_server/public_hmtl/bigfile.zip</div><div class="line"></div><div class="line"># 上传文件</div><div class="line">curl -u ftpuser:ftppw -T myfile.txt ftp://ftp_server/public_html/</div><div class="line"></div><div class="line"># 上传多个文件</div><div class="line">curl -u ftpuser:ftppw -T &quot;&#123;myfile1.txt, myfile2.txt&#125;&quot; ftp://ftp_server/public_html/</div><div class="line"></div><div class="line"># 从标准输入获取内容保存到服务器的指定文件中</div><div class="line">curl -u ftpuser:ftppw -T - ftp://ftp_server/public_html/1.txt</div></pre></td></tr></table></figure>
<h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -x proxyserver.com:1080 http://www.example.com</div></pre></td></tr></table></figure>
<h3 id="保存与使用网站的cookie信息"><a href="#保存与使用网站的cookie信息" class="headerlink" title="保存与使用网站的cookie信息"></a>保存与使用网站的cookie信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 将网站的cookies信息保存到example_cookies文件中</div><div class="line">curl -D example_cookies http://www.example.com</div><div class="line"></div><div class="line"># 使用cookies信息访问url</div><div class="line">curl -b example_cookies http://www.example.com/user/</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。&lt;br&gt;
    
    </summary>
    
      <category term="程序猿" scheme="http://me.iblogc.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
    
      <category term="curl" scheme="http://me.iblogc.com/tags/curl/"/>
    
  </entry>
  
  <entry>
    <title>多说评论UA显示测试</title>
    <link href="http://me.iblogc.com/2015/11/15/duoshuo-comments-ua/"/>
    <id>http://me.iblogc.com/2015/11/15/duoshuo-comments-ua/</id>
    <published>2015-11-15T09:45:12.000Z</published>
    <updated>2016-12-08T15:29:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><a id="more"></a><br>多说评论UA显示测试</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br/&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Django字段选项related_name和related_query_name</title>
    <link href="http://me.iblogc.com/2015/10/20/django%E5%AD%97%E6%AE%B5%E9%80%89%E9%A1%B9related-name%E5%92%8Crelated-query-name/"/>
    <id>http://me.iblogc.com/2015/10/20/django字段选项related-name和related-query-name/</id>
    <published>2015-10-20T14:22:06.000Z</published>
    <updated>2015-11-12T13:02:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>data</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sqlite&gt; select * from author;</div><div class="line">id      name    age</div><div class="line">1       jim     12</div><div class="line">2       tom     11</div><div class="line">sqlite&gt; select * from book;</div><div class="line">id      name    author_id</div><div class="line">1       learn java      1</div><div class="line">2       learn python    1</div><div class="line">3       learn c++       2</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><code>models.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"></div><div class="line"><span class="comment"># Create your models here.</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(verbose_name=<span class="string">'姓名'</span>, max_length=<span class="number">50</span>)</div><div class="line">    age = models.IntegerField(verbose_name=<span class="string">'年龄'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(verbose_name=<span class="string">'书名'</span>, max_length=<span class="number">100</span>)</div><div class="line">    author = models.ForeignKey(Author, verbose_name=<span class="string">'作者'</span>)</div></pre></td></tr></table></figure></p>
<p>执行语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; Author.objects.filter(book__name=&apos;learn java&apos;)</div><div class="line">[&lt;Author: jim&gt;]</div><div class="line">&gt;&gt;&gt; author = Author.objects.get(pk=1)</div><div class="line">&gt;&gt;&gt; author.book_set.all()</div><div class="line">[&lt;Book: learn java&gt;, &lt;Book: learn python&gt;]</div></pre></td></tr></table></figure></p>
<p>假如把类<code>Book</code>改成这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">class Book(models.Model):</div><div class="line">    name = models.CharField(verbose_name=&apos;书名&apos;, max_length=100)</div><div class="line">    author = models.ForeignKey(Author, verbose_name=&apos;作者&apos;, related_name=&apos;bs&apos;, related_query_name=&apos;b&apos;)</div></pre></td></tr></table></figure></p>
<p>那么上面查询代码就应该写成这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; Author.objects.filter(b__name=&apos;learn java&apos;)</div><div class="line">[&lt;Author: jim&gt;]</div><div class="line">&gt;&gt;&gt; author = Author.objects.get(pk=1)</div><div class="line">&gt;&gt;&gt; author.bs.all()</div><div class="line">[&lt;Book: learn java&gt;, &lt;Book: learn python&gt;]</div></pre></td></tr></table></figure></p>
<blockquote>
<p>如果<code>book</code>表里有两个字段都外键关联<code>author</code>表，这时<code>related_name</code>就非常有用了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;data&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sqlite&amp;gt; select * from author;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;id      name    age&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1       jim     12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2       tom     11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sqlite&amp;gt; select * from book;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;id      name    author_id&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1       learn java      1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2       learn python    1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3       learn c++       2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="程序猿" scheme="http://me.iblogc.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
    
      <category term="django" scheme="http://me.iblogc.com/tags/django/"/>
    
      <category term="python" scheme="http://me.iblogc.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Git stash的简单运用</title>
    <link href="http://me.iblogc.com/2015/10/20/git-stash%E7%9A%84%E7%AE%80%E5%8D%95%E8%BF%90%E7%94%A8/"/>
    <id>http://me.iblogc.com/2015/10/20/git-stash的简单运用/</id>
    <published>2015-10-20T14:16:18.000Z</published>
    <updated>2016-12-08T15:30:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我们在分支上改代码改到一半时，突然项目发现了一个bug需要修复，这时需要切换到另一个分支进行修改，以前的做法可能是把工作区改到一半的代码先commit，然后切换分支修复bug，再切换回来继续写代码，但这样会生成很多不必要的提交，这时你就需要使用<code>git stash</code>命令。<br><a id="more"></a><br><code>git stash</code>命令可将工作区的改动存储git栈，运行<code>git stash</code>之后，可以再运行<code>git status -s</code>验证下发现目录和上交commit时是一致的，没有任何修改，这时你就可以切换到其它分支进行工作，当你完成工作后，再切换回来，使用<code>git stash pop</code>可以从Git栈中读取最近一次保存的内容，恢复到工作区。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。</div><div class="line">git stash save &quot;message&quot;: 备份当前的工作区的内容，并添加备注信息</div><div class="line">git stash list: 显示git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。</div><div class="line">git stash pop stash@&#123;0&#125;: 从git栈中读取并恢复工作区，然后删除对应的记录，默认恢复最新的（stash@&#123;0&#125;为最新）</div><div class="line">git stash apply stash@&#123;0&#125;: 同git stash pop，但不会删除对应的记录</div><div class="line">git stash clear: 清空git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.tuicool.com/articles/rUBNBvI" target="_blank" rel="external">http://www.tuicool.com/articles/rUBNBvI</a><br>及<code>git stash --help</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们在分支上改代码改到一半时，突然项目发现了一个bug需要修复，这时需要切换到另一个分支进行修改，以前的做法可能是把工作区改到一半的代码先commit，然后切换分支修复bug，再切换回来继续写代码，但这样会生成很多不必要的提交，这时你就需要使用&lt;code&gt;git stash&lt;/code&gt;命令。&lt;br&gt;
    
    </summary>
    
      <category term="程序猿" scheme="http://me.iblogc.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
    
      <category term="git" scheme="http://me.iblogc.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git patch的简单运用</title>
    <link href="http://me.iblogc.com/2015/10/15/git-patch%E7%9A%84%E7%AE%80%E5%8D%95%E8%BF%90%E7%94%A8/"/>
    <id>http://me.iblogc.com/2015/10/15/git-patch的简单运用/</id>
    <published>2015-10-15T12:49:40.000Z</published>
    <updated>2017-02-09T16:12:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生成PATCH"><a href="#生成PATCH" class="headerlink" title="生成PATCH"></a>生成PATCH</h2><p>往前n个提前内容的patch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git format-patch -n</div></pre></td></tr></table></figure></p>
<p>某个commit（含）的及之前的n-1次提交的patch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git format-patch -n SHA</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>某个commit的patch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git format-patch -1 SHA</div></pre></td></tr></table></figure></p>
<p>当前分支所有超前master提交的patch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git format-patch -M master</div></pre></td></tr></table></figure></p>
<p>两个commit之间的所有patch（不包含较早SHA1提交的内容）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git format-patch SHA1...SHA1</div></pre></td></tr></table></figure></p>
<p>某个commit之后的所有patch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git format-patch -s SHA</div></pre></td></tr></table></figure></p>
<h2 id="应用PATCH"><a href="#应用PATCH" class="headerlink" title="应用PATCH"></a>应用PATCH</h2><p>检查patch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git apply --stat xxx.patch</div></pre></td></tr></table></figure></p>
<p>检查能否应用成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git apply --check xxx.patch</div></pre></td></tr></table></figure></p>
<p>打补丁<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git am -s xxx.patch</div></pre></td></tr></table></figure></p>
<p>如果有冲突，整个PATCH都不会被集成，接来来解决冲突问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 把没有冲突的文件先合并了，剩下有冲突的作了标记</div><div class="line">git apply PATCH --reject</div><div class="line"># 这里手动解决冲突</div><div class="line"># 把解决冲突的和PATCH里新加的文件全部add进来，因为git am并不会改变index</div><div class="line">git add FIXED_FILES</div><div class="line">git am --resolved</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.csdn.net/daydring/article/details/42676987" target="_blank" rel="external">http://blog.csdn.net/daydring/article/details/42676987</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;生成PATCH&quot;&gt;&lt;a href=&quot;#生成PATCH&quot; class=&quot;headerlink&quot; title=&quot;生成PATCH&quot;&gt;&lt;/a&gt;生成PATCH&lt;/h2&gt;&lt;p&gt;往前n个提前内容的patch&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git format-patch -n&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;某个commit（含）的及之前的n-1次提交的patch&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git format-patch -n SHA&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="程序猿" scheme="http://me.iblogc.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
    
      <category term="git" scheme="http://me.iblogc.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Material Design资源</title>
    <link href="http://me.iblogc.com/2015/10/15/material-design%E8%B5%84%E6%BA%90/"/>
    <id>http://me.iblogc.com/2015/10/15/material-design资源/</id>
    <published>2015-10-15T12:19:42.000Z</published>
    <updated>2017-02-09T16:36:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://iblogc.qiniudn.com/2017-02-09-materialdesign-goals-landingimage_large_mdpi.png" alt="materialdesign-goals-landingimage_large_mdpi"></p>
<p>Material Design是谷歌在Google I/O 2014推出了全新的设计语言，并荣获2014年的用户体验最佳贡献金奖。<br><a id="more"></a></p>
<h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>2015-10-15 初稿</p>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><iframe src="http://player.youku.com/embed/XNzMxNzUyNzQ0" frameborder="0" allowfullscreen></iframe>

<h2 id="Material-Design-文档"><a href="#Material-Design-文档" class="headerlink" title="Material Design 文档"></a>Material Design 文档</h2><p>官方</p>
<blockquote>
<p><a href="http://www.google.com/design/spec/material-design/introduction.html" target="_blank" rel="external">http://www.google.com/design/spec/material-design/introduction.html</a></p>
</blockquote>
<p>Material Design 中文版（官网翻译而来）</p>
<blockquote>
<p>阅读: <a href="http://wiki.jikexueyuan.com/project/material-design/" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/material-design/</a><br>GitHub: <a href="https://github.com/1sters/material_design_zh_2" target="_blank" rel="external">https://github.com/1sters/material_design_zh_2</a><br>PDF: <a href="http://pan.baidu.com/s/1fr1gi" target="_blank" rel="external">http://pan.baidu.com/s/1fr1gi</a> </p>
</blockquote>
<p>Material Design 中文版（官网翻译而来）</p>
<blockquote>
<p>阅读: <a href="http://design.1sters.com/" target="_blank" rel="external">http://design.1sters.com/</a> （已关停）<br>GitHub: <a href="https://github.com/1sters/material_design_zh" target="_blank" rel="external">https://github.com/1sters/material_design_zh</a></p>
</blockquote>
<p>Google Material Design 正體中文版（官网翻译而来）</p>
<blockquote>
<p>阅读: <a href="https://www.gitbook.com/book/wcc723/google_design_translate/details" target="_blank" rel="external">https://www.gitbook.com/book/wcc723/google_design_translate/details</a><br>GitHub: <a href="https://github.com/Wcc723/google_design_translate" target="_blank" rel="external">https://github.com/Wcc723/google_design_translate</a><br>PDF: <a href="http://pan.baidu.com/s/1dD8X1Zj" target="_blank" rel="external">http://pan.baidu.com/s/1dD8X1Zj</a></p>
</blockquote>
<p>Material Design非官方中文指导手册</p>
<p>PDF: <a href="http://pan.baidu.com/s/1mg3P45i" target="_blank" rel="external">http://pan.baidu.com/s/1mg3P45i</a></p>
<h2 id="Android资源"><a href="#Android资源" class="headerlink" title="Android资源"></a>Android资源</h2><p>资源大合集<br><a href="https://github.com/lightSky/Awesome-MaterialDesign" target="_blank" rel="external">https://github.com/lightSky/Awesome-MaterialDesign</a> </p>
<p>十大Material Design开源项目<br><a href="http://www.csdn.net/article/2014-11-21/2822753-material-design-libs/1" target="_blank" rel="external">http://www.csdn.net/article/2014-11-21/2822753-material-design-libs/1</a></p>
<h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><p>Material icons guide</p>
<blockquote>
<p>主页: <a href="http://google.github.io/material-design-icons/" target="_blank" rel="external">http://google.github.io/material-design-icons/</a><br>GitHub: <a href="https://github.com/google/material-design-icons" target="_blank" rel="external">https://github.com/google/material-design-icons</a></p>
</blockquote>
<h2 id="网页框架"><a href="#网页框架" class="headerlink" title="网页框架"></a>网页框架</h2><p>Angular Material（控件最全，样式不错，交互动态效果多）</p>
<blockquote>
<p>主页: <a href="https://material.angularjs.org/" target="_blank" rel="external">https://material.angularjs.org/</a><br>GitHub: <a href="https://material.angularjs.org/" target="_blank" rel="external">https://material.angularjs.org/</a></p>
</blockquote>
<p>material ui（控件较多，样式不错，交互动态效果多）</p>
<blockquote>
<p>主页: <a href="http://material-ui.com/" target="_blank" rel="external">http://material-ui.com/</a><br>GitHub: <a href="https://github.com/callemall/material-ui" target="_blank" rel="external">https://github.com/callemall/material-ui</a></p>
</blockquote>
<p>bootstrap-material-design（控件数量还行，样式较好，交互动态效果还行，Demo里部分样式有错位问题）</p>
<blockquote>
<p>主页: <a href="http://fezvrasta.github.io/bootstrap-material-design/" target="_blank" rel="external">http://fezvrasta.github.io/bootstrap-material-design/</a><br>GitHub: <a href="http://fezvrasta.github.io/bootstrap-material-design/" target="_blank" rel="external">http://fezvrasta.github.io/bootstrap-material-design/</a></p>
</blockquote>
<p>muicss（控件较少，样式普通，交互动态效果少）（体积小，css+js 11.4k）</p>
<blockquote>
<p>主页: <a href="https://www.muicss.com/" target="_blank" rel="external">https://www.muicss.com/</a><br>GitHub: <a href="https://github.com/muicss/mui" target="_blank" rel="external">https://github.com/muicss/mui</a></p>
</blockquote>
<p>MaterializeCss（控件数量还行，样式较好，交互动态效果还行）</p>
<blockquote>
<p>主页: <a href="http://materializecss.com/" target="_blank" rel="external">http://materializecss.com/</a><br>GitHub: <a href="https://github.com/Dogfalo/materialize" target="_blank" rel="external">https://github.com/Dogfalo/materialize</a></p>
</blockquote>
<p>bootswatch里的parper主题</p>
<blockquote>
<p>主页: <a href="http://bootswatch.com/paper/" target="_blank" rel="external">http://bootswatch.com/paper/</a><br>GitHub: <a href="https://github.com/thomaspark/bootswatch" target="_blank" rel="external">https://github.com/thomaspark/bootswatch</a></p>
</blockquote>
<p>jQuery Mobile Material Theme（控件较少，样式普通，无交互动态效果）</p>
<blockquote>
<p>主页: <a href="http://store.ququplay.com/" target="_blank" rel="external">http://store.ququplay.com/</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://iblogc.qiniudn.com/2017-02-09-materialdesign-goals-landingimage_large_mdpi.png&quot; alt=&quot;materialdesign-goals-landingimage_large_mdpi&quot;&gt;&lt;/p&gt;
&lt;p&gt;Material Design是谷歌在Google I/O 2014推出了全新的设计语言，并荣获2014年的用户体验最佳贡献金奖。&lt;br&gt;
    
    </summary>
    
      <category term="程序猿" scheme="http://me.iblogc.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
    
      <category term="android" scheme="http://me.iblogc.com/tags/android/"/>
    
      <category term="material design" scheme="http://me.iblogc.com/tags/material-design/"/>
    
      <category term="网页框架" scheme="http://me.iblogc.com/tags/%E7%BD%91%E9%A1%B5%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="http://me.iblogc.com/2015/09/11/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://me.iblogc.com/2015/09/11/git常用命令/</id>
    <published>2015-09-11T12:05:13.000Z</published>
    <updated>2017-02-09T16:33:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://iblogc.qiniudn.com/2017-02-09-Git工作流图示-1.jpg" alt="Git工作流图示"></p>
<p>之前写过一篇<a href="2015/01/16/Git%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/">Git命令使用指南</a>，但感觉那个写的太乱，不接地气，有时我自己找一个命令都难找，所以今天写一篇文章整理一些比较基础的，但又不常用的一些命令，后面会慢慢更新。</p>
<a id="more"></a>
<p>列出分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 列出本地分支</div><div class="line">git branch</div><div class="line">或</div><div class="line">git branch -v</div><div class="line"></div><div class="line"># 列出本地和远程所有分支</div><div class="line">git branch -a</div><div class="line">或</div><div class="line">git branch -va</div></pre></td></tr></table></figure></p>
<p>删除分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 删除本地分支</div><div class="line">git branck -D &lt;branch&gt;</div><div class="line"></div><div class="line"># 删除远程分支，注意冒号前有空格</div><div class="line">git push origin :&lt;分支名&gt;</div><div class="line"># 等价于</div><div class="line">git push origin --delete &lt;branch&gt;</div></pre></td></tr></table></figure></p>
<p>推送分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 推送当前分支到默认remote上，remote上没有对应分支则自动创建</div><div class="line">git push</div><div class="line"></div><div class="line"># 推送当前分支到指定remote，remote上没有对应分支则自动创建</div><div class="line">git push &lt;remote&gt;</div><div class="line"></div><div class="line"># 推送到指定分支到remote的指定分支上</div><div class="line">git push &lt;remote&gt; &lt;remote_branch&gt;:&lt;loclal_branch&gt;</div></pre></td></tr></table></figure></p>
<p>拉取远程分支到本地<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b &lt;branch&gt; &lt;remote&gt;/&lt;branch&gt;</div></pre></td></tr></table></figure></p>
<p>撤消提交（未<code>push</code>情况下）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git reset --mixed &lt;SHA1&gt; # 此SHA1之后的commit全部撤消，并回退index，工作空间代码不变，--mixed可省略</div><div class="line">git reset --soft &lt;SHA1&gt; # 此SHA1之后的commit全部撤消，工作空间代码和index不变</div><div class="line">git reset --hard &lt;SHA1&gt; # 此SHA1之后的commit全部撤消，工作空间代码和index全部退回</div></pre></td></tr></table></figure></p>
<p>查看<code>commit</code>记录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log --oneline -n # 单行显示最后n个commit的记录</div></pre></td></tr></table></figure></p>
<p>本地分支和远程分支做关联<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch --set-upstream-to=&lt;remote&gt;/&lt;remote_branch&gt; &lt;loclal_branch&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://iblogc.qiniudn.com/2017-02-09-Git工作流图示-1.jpg&quot; alt=&quot;Git工作流图示&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前写过一篇&lt;a href=&quot;2015/01/16/Git%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/&quot;&gt;Git命令使用指南&lt;/a&gt;，但感觉那个写的太乱，不接地气，有时我自己找一个命令都难找，所以今天写一篇文章整理一些比较基础的，但又不常用的一些命令，后面会慢慢更新。&lt;/p&gt;
    
    </summary>
    
      <category term="程序猿" scheme="http://me.iblogc.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
    
      <category term="git" scheme="http://me.iblogc.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Django内置的flatpages应用</title>
    <link href="http://me.iblogc.com/2015/09/08/django%E5%86%85%E7%BD%AE%E7%9A%84flatpages%E5%BA%94%E7%94%A8/"/>
    <id>http://me.iblogc.com/2015/09/08/django内置的flatpages应用/</id>
    <published>2015-09-08T13:17:55.000Z</published>
    <updated>2015-09-08T13:17:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知道大家平时写网站时类似「关于页面」，「用户协议」这类页面是如何处理的。这里列出了这类页面的两个特点：</p>
<ol>
<li>页面数据简单（不会有很多动态数据展示）;</li>
<li>有更新但频率不高;</li>
</ol>
<p>如果要为这类页面展示建立多个数据表，显然是很浪费的行为，但如果直接写成静态页面文件，更新又比较很麻烦，这时候就可以使用<code>flatpages</code>来解决这类问题了。<br><a id="more"></a></p>
<p><code>django.contrib.flatpages</code>是<code>Django</code>的内置app，用于添加更新的一些简单的页面，具体设置，请继续查看以下步骤。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先确保<code>INSTALLED_APPS</code>中已经存在<code>django.contrib.sites</code>，因为<code>django.contrib.flatpages</code>依赖于此包。<br><code>settings.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = (</div><div class="line">    <span class="comment"># ...</span></div><div class="line">    <span class="string">'django.contrib.sites'</span>,</div><div class="line">    <span class="string">'django.contrib.flatpages'</span>,</div><div class="line">)</div><div class="line"><span class="comment"># ...</span></div><div class="line"><span class="comment"># 如果没有设置`SITE_ID`值，则需要设置，这里直接设置为1</span></div><div class="line">SITE_ID = <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>执行<code>python manage.py migrate</code>建表</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>路由配置可先以有多种形式<br><code>urls.py</code><br>第一种（需放在最后，推荐）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from django.contrib.flatpages import views</div><div class="line">urlpatterns += [</div><div class="line">    url(r&apos;^(?P&lt;url&gt;.*/)$&apos;, views.flatpage),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>第二种（每个页面都需要写一个url，推荐）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from django.contrib.flatpages import views</div><div class="line">urlpatterns = [</div><div class="line">    url(r&apos;^about-us/$&apos;, views.flatpage, &#123;&apos;url&apos;: &apos;/about-us/&apos;&#125;, name=&apos;about&apos;),</div><div class="line">    url(r&apos;^license/$&apos;, views.flatpage, &#123;&apos;url&apos;: &apos;/license/&apos;&#125;, name=&apos;license&apos;),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>或者，如果你不想配置路由，还有一种更简单的方法，直接在<code>settings.py</code>的里添加中间件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MIDDLEWARE_CLASSES = (</div><div class="line">    # ...</div><div class="line">    &apos;django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&apos;,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p><em>为确保配置生效，保险的方法是把<code>django.contrib.flatpages.middleware.FlatpageFallbackMiddleware</code>放在最后一行</em></p>
<h2 id="管理flatpages"><a href="#管理flatpages" class="headerlink" title="管理flatpages"></a>管理<code>flatpages</code></h2><p>默认的你可以登录超级管理员后台（如果开启），找到<code>Flat pages</code>，进去点击添加，可以看到可配置的选项有，<code>URL</code> <code>Title</code> <code>Content</code> <code>Site</code> <code>Enable comments</code> <code>Registration required</code> <code>Template name</code></p>
<h3 id="数据项说明"><a href="#数据项说明" class="headerlink" title="数据项说明"></a>数据项说明</h3><ul>
<li><code>URL</code>:  页面所处的 URL，不包括域名，但是包含前导斜杠 (例如 /about/contact/ )</li>
<li><code>Title</code>: 页面的标题，框架不对它作任何特殊处理。由你通过模板来显示它</li>
<li><code>Content</code>: 页面的内容 (即 HTML 页面)，框架不会对它作任何特别处理。由你负责使用模板来显示</li>
<li><code>Site</code>: 页面放置的站点，该项设置集成了 Django 多站点框架</li>
<li><code>Enable comments</code>: 是否允许该简单页面使用评论，框架不对此做任何特别处理。你可在模板中检查该值并根据需要显示评论窗体</li>
<li><code>Registration required</code>: 是否注册用户才能查看此简单页面，该设置项集成了 Djangos 验证/用户框架，该框架于第十二章详述。</li>
<li><code>Template name</code>: 用来解析该简单页面的模板名称，这是一个可选项，如果未指定模板或该模板不存在，系统会退而使用默认模板 <code>flatpages/default.html</code>（我在<code>Django1.8.4</code>里死活没找到，只好自己写好一个扔进去）</li>
</ul>
<p>当添加相应的数据后，剩下工作就交给<code>flatpages</code>吧，如果你是使用中间件形式的，则<code>flatpages</code>会在配置完所有<code>urls.py</code>后，没有找到配置到对应的<code>URL</code>，才会到<code>flatpages</code>中查找，如果还是找不到，则会引发<code>Http404</code>异常，即<code>FlatpageFallbackMiddleware</code>只在<code>404</code>时会被激活，而不会在<code>500</code>或其它错误响应时被激活。</p>
<p>如果你需要自己定制，则可以针对<code>django/contrib/flatpages/models.py</code>自己写增删改方法就可以。<br><code>models.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlatPage</span><span class="params">(models.Model)</span>:</span></div><div class="line">    url = models.CharField(_(<span class="string">'URL'</span>), max_length=<span class="number">100</span>, db_index=<span class="keyword">True</span>)</div><div class="line">    title = models.CharField(_(<span class="string">'title'</span>), max_length=<span class="number">200</span>)</div><div class="line">    content = models.TextField(_(<span class="string">'content'</span>), blank=<span class="keyword">True</span>)</div><div class="line">    enable_comments = models.BooleanField(_(<span class="string">'enable comments'</span>), default=<span class="keyword">False</span>)</div><div class="line">    template_name = models.CharField(_(<span class="string">'template name'</span>), max_length=<span class="number">70</span>, blank=<span class="keyword">True</span>,</div><div class="line">        help_text=_(</div><div class="line">            <span class="string">"Example: 'flatpages/contact_page.html'. If this isn't provided, "</span></div><div class="line">            <span class="string">"the system will use 'flatpages/default.html'."</span></div><div class="line">        ),</div><div class="line">    )</div><div class="line">    registration_required = models.BooleanField(_(<span class="string">'registration required'</span>),</div><div class="line">        help_text=_(<span class="string">"If this is checked, only logged-in users will be able to view the page."</span>),</div><div class="line">        default=<span class="keyword">False</span>)</div><div class="line">    sites = models.ManyToManyField(Site)</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        db_table = <span class="string">'django_flatpage'</span></div><div class="line">        verbose_name = _(<span class="string">'flat page'</span>)</div><div class="line">        verbose_name_plural = _(<span class="string">'flat pages'</span>)</div><div class="line">        ordering = (<span class="string">'url'</span>,)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"%s -- %s"</span> % (self.url, self.title)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_absolute_url</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># Handle script prefix manually because we bypass reverse()</span></div><div class="line">        <span class="keyword">return</span> iri_to_uri(get_script_prefix().rstrip(<span class="string">'/'</span>) + self.url)</div></pre></td></tr></table></figure></p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>默认模板路径为<code>flatpages/default.html</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123; flatpage.title &#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">&#123;&#123; flatpage.content &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>在实际应用中，我们不太可能会使用默认的模板，你可能需要自己写一个漂亮模板，比如有一个头部和底部，头部可能还需要添加<code>requeset.user</code>显示用户信息等。</p>
</blockquote>
<h2 id="高级应用"><a href="#高级应用" class="headerlink" title="高级应用"></a>高级应用</h2><p>获取<code>flatpages</code>实例列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;% load flatpages %&#125;</div><div class="line">&#123;% get_flatpages as flatpages %&#125;</div></pre></td></tr></table></figure></p>
<p>获取当前用户能打开的<code>flatpages</code>实例列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;% load flatpages %&#125;</div><div class="line">&#123;% get_flatpages for request.user as about_pages %&#125;</div></pre></td></tr></table></figure></p>
<p>获取链接以<code>/about/</code>为开头的<code>flatpages</code>实例列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;% load flatpages %&#125;</div><div class="line">&#123;% get_flatpages &apos;/about/&apos; as about_pages %&#125;</div></pre></td></tr></table></figure></p>
<p>上面两种也可以组合使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;% load flatpages %&#125;</div><div class="line">&#123;% get_flatpages &apos;/about/&apos; for someuser as about_pages %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="生成sitemaps-xml"><a href="#生成sitemaps-xml" class="headerlink" title="生成sitemaps.xml"></a>生成<code>sitemaps.xml</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">from django.conf.urls import url</div><div class="line">from django.contrib.flatpages.sitemaps import FlatPageSitemap</div><div class="line">from django.contrib.sitemaps.views import sitemap</div><div class="line"> </div><div class="line">urlpatterns = [</div><div class="line">    # ...</div><div class="line"> </div><div class="line">    # the sitemap</div><div class="line">    url(r&apos;^sitemap\.xml$&apos;, sitemap,</div><div class="line">        &#123;&apos;sitemaps&apos;: &#123;&apos;flatpages&apos;: FlatPageSitemap&#125;&#125;,</div><div class="line">        name=&apos;django.contrib.sitemaps.views.sitemap&apos;),</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="容易踩的坑"><a href="#容易踩的坑" class="headerlink" title="容易踩的坑"></a>容易踩的坑</h2><p>最好把<code>settings.py</code>里的<code>APPEND_SLASH</code>设置为<code>Ture</code>， 这样不管是<code>/about-us</code>还是<code>/about-us/</code>都可以访问到。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://docs.djangoproject.com/en/1.8/ref/contrib/flatpages/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.8/ref/contrib/flatpages/</a></li>
<li><a href="http://djangobook.py3k.cn/2.0/chapter16/" target="_blank" rel="external">http://djangobook.py3k.cn/2.0/chapter16/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知道大家平时写网站时类似「关于页面」，「用户协议」这类页面是如何处理的。这里列出了这类页面的两个特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;页面数据简单（不会有很多动态数据展示）;&lt;/li&gt;
&lt;li&gt;有更新但频率不高;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果要为这类页面展示建立多个数据表，显然是很浪费的行为，但如果直接写成静态页面文件，更新又比较很麻烦，这时候就可以使用&lt;code&gt;flatpages&lt;/code&gt;来解决这类问题了。&lt;br&gt;
    
    </summary>
    
      <category term="程序猿" scheme="http://me.iblogc.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
    
      <category term="django" scheme="http://me.iblogc.com/tags/django/"/>
    
      <category term="python" scheme="http://me.iblogc.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>使用Synergy实现多台电脑共享一套键鼠</title>
    <link href="http://me.iblogc.com/2015/08/29/%E4%BD%BF%E7%94%A8synergy%E5%AE%9E%E7%8E%B0%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E5%85%B1%E4%BA%AB%E4%B8%80%E5%A5%97%E9%94%AE%E9%BC%A0/"/>
    <id>http://me.iblogc.com/2015/08/29/使用synergy实现多台电脑共享一套键鼠/</id>
    <published>2015-08-29T15:52:41.000Z</published>
    <updated>2017-02-09T05:21:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://iblogc.qiniudn.com/2017-02-09-Synergy-logo.png" alt="Synergy-logo"></p>
<p>因为家里有一台台式和一台笔记本，台式<code>Windows10</code>为日常使用，笔记本<code>Ubuntu&amp;Windows7</code>，以前一直在<code>Windows</code>上敲代码，现在正转向<code>Ubuntu</code>，但家里桌子上摆放两台电脑已经有点挤了，如果再来两套键鼠那就成二手电脑配件甩卖铺了，所以上网查了下看看有没有软件能实现两台电脑共享一套键盘的，还真找到了一款叫<code>Synergy</code>的软件，支持<code>Windows</code>, <code>Mac OS X</code>, <code>Linux</code>三大系统，软件是下载收费，使用使用免费，官网上标明基础版$10，高级版$29。下面我说说我自己的配置过程。<br><a id="more"></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在<code>Ubuntu</code>里打开终端，输入以下命令进行安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install synergy</div></pre></td></tr></table></figure></p>
<p>在<code>Windwos</code>上双击安装。</p>
<p><em><code>Ubuntu</code>我安装的是1.6.2，<code>Windwos</code>上是1.7.4 x64</em></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="服务器设置"><a href="#服务器设置" class="headerlink" title="服务器设置"></a>服务器设置</h3><blockquote>
<p><code>synergy</code>需要一台电脑做为服务端，其它电脑做为客户端来连接服务端。<br>本来是我想选择<code>Ubuntu</code>做为服务端的，但设置好后链接失败提示为<code>WARNING: failed to connect to server: incompatible client 1.5</code>，似乎是不兼容，但我的客户端版本是<code>1.6.2</code>不是<code>1.5</code>啊，所以作罢，只得选用<code>Windwos</code>来做服务端。</p>
</blockquote>
<ol>
<li><p>我们选用<code>Windwos</code>来做服务端，在<code>Windwos</code>打开软件，选择「server」；<br><img src="http://iblogc.qiniudn.com/2017-02-09-Synergy-Windows服务端配置首页.png" alt="Synergy-Windows服务端配置首页"></p>
</li>
<li><p>点击「设置服务端」进行添加客户端操作；<br><img src="http://iblogc.qiniudn.com/2017-02-09-Synergy-Windows服务端添加客户端-01.png" alt="Synergy-Windows服务端添加客户端-01"></p>
</li>
<li><p>从右上角手动电脑图标到下方的格子里，这里的格式位置对应你当前几台电脑的实际的垂直平台位置，中间这台是服务端，也就是我现在操作的这台<code>Windows</code>，我的<code>Ubuntu</code>电脑放在<code>Windows</code>电脑的左侧，所以我把电脑图标拖到中间左侧的格子里；<br><img src="http://iblogc.qiniudn.com/2017-02-09-Synergy-Windows服务端添加客户端-02.png" alt="Synergy-Windows服务端添加客户端-02"></p>
</li>
<li><p>双击电脑图标进行编辑，这里我们只需要输入客户端电脑的计算机名，其它都默认；<br><img src="http://iblogc.qiniudn.com/2017-02-09-Synergy-Windows服务端添加客户端-03.png" alt="Synergy-Windows服务端添加客户端-03"></p>
</li>
<li><p>设置好后点击再次ok，回到设置首页，点击「开始」启动服务端；<br><img src="http://iblogc.qiniudn.com/2017-02-09-Synergy-Windows服务端启动.png" alt="Synergy-Windows服务端启动"></p>
</li>
</ol>
<h3 id="客户端设置"><a href="#客户端设置" class="headerlink" title="客户端设置"></a>客户端设置</h3><ol>
<li>客户端比较简单，在<code>Ubuntu</code>上打开<code>Synergy</code>，选择「Client」，在<code>Server IP</code>里输入服务端的IP，点击「Start」即可；<br><img src="http://iblogc.qiniudn.com/2017-02-09-Synergy-Ubuntu客户端配置首页.png" alt="Synergy-Ubuntu客户端配置首页"></li>
</ol>
<h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><p>要在<code>Ubuntu</code>开机在登录界面前启动<code>synergy</code>，编辑<code>/etc/lightdm/lightdm.conf</code>文件添加<code>display-setup-script=/usr/bin/synergyc 192.168.9.102</code>，把<code>192.168.9.102</code>换成你自己的<code>synergy</code>服务端IP。</p>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>到这里你就会发现你可鼠标可以在两个电脑屏幕上移动了，像我刚才配置的是在<code>Windows</code>左侧添加了<code>Ubuntu</code>，所以当我在<code>Windows</code>上把鼠标向左移动，并移到边界，再继续左移时，鼠标就会出现在<code>Ubuntu</code>屏幕上，键盘的行为跟随鼠标的，即鼠标在哪个屏幕，键盘输入就对应哪个屏幕的系统。</p>
<blockquote>
<p>网上说<code>Synergy</code>支持在不同电脑间复制粘贴，目前我自己没有试成功，有知道朋友可以和说。</p>
</blockquote>
<h2 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h2><p>项目主页：<a href="https://github.com/synergy/synergy" target="_blank" rel="external">https://github.com/synergy/synergy</a></p>
<h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>2015-08-29 初稿<br>2015-09-03 补充<code>Ubuntu</code>客户端自启明说</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://iblogc.qiniudn.com/2017-02-09-Synergy-logo.png&quot; alt=&quot;Synergy-logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;因为家里有一台台式和一台笔记本，台式&lt;code&gt;Windows10&lt;/code&gt;为日常使用，笔记本&lt;code&gt;Ubuntu&amp;amp;Windows7&lt;/code&gt;，以前一直在&lt;code&gt;Windows&lt;/code&gt;上敲代码，现在正转向&lt;code&gt;Ubuntu&lt;/code&gt;，但家里桌子上摆放两台电脑已经有点挤了，如果再来两套键鼠那就成二手电脑配件甩卖铺了，所以上网查了下看看有没有软件能实现两台电脑共享一套键盘的，还真找到了一款叫&lt;code&gt;Synergy&lt;/code&gt;的软件，支持&lt;code&gt;Windows&lt;/code&gt;, &lt;code&gt;Mac OS X&lt;/code&gt;, &lt;code&gt;Linux&lt;/code&gt;三大系统，软件是下载收费，使用使用免费，官网上标明基础版$10，高级版$29。下面我说说我自己的配置过程。&lt;br&gt;
    
    </summary>
    
      <category term="优化辅助" scheme="http://me.iblogc.com/categories/%E4%BC%98%E5%8C%96%E8%BE%85%E5%8A%A9/"/>
    
    
      <category term="synergy" scheme="http://me.iblogc.com/tags/synergy/"/>
    
      <category term="共享" scheme="http://me.iblogc.com/tags/%E5%85%B1%E4%BA%AB/"/>
    
      <category term="键盘" scheme="http://me.iblogc.com/tags/%E9%94%AE%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu从14.10升级到15.04</title>
    <link href="http://me.iblogc.com/2015/08/29/ubuntu%E4%BB%8E14-10%E5%8D%87%E7%BA%A7%E5%88%B015-04/"/>
    <id>http://me.iblogc.com/2015/08/29/ubuntu从14-10升级到15-04/</id>
    <published>2015-08-29T10:23:11.000Z</published>
    <updated>2017-02-09T16:47:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://iblogc.qiniudn.com/2017-02-09-ubuntu-15.04-logo.jpg" alt="ubuntu-15.04-logo"></p>
<p>ubuntu15.04已经发布几个月了，今天准备把家里的笔记本升级下，在这记录下，因为笔记本是14.10的所以下面内容只适用于从14.10升级到15.04的，如果你的系统是14.04，则需要先升级到14.10然后再升级到15.04。<br><a id="more"></a></p>
<p>先检查系统更新，如果有则进行更新，在终端中输入以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update &amp;&amp; sudo apt-get dist-upgrade</div></pre></td></tr></table></figure></p>
<p>然后检查是否有可用的版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo update-manager -d</div></pre></td></tr></table></figure></p>
<p>回车后会弹出软件更新器，等检查完成后点击升级，后面还会出来很多个确认对话框，一路确定下去就好。</p>
<p>最后点击开始升级，然后就等着更新自动下载更新吧。<br><img src="http://iblogc.qiniudn.com/2017-02-09-ubuntu-14.10-15.04-01.png" alt="ubuntu-14.10-15.04-01"></p>
<p>更新完后重启系统即可完成升级。<br><img src="http://iblogc.qiniudn.com/2017-02-09-ubuntu-15.04-info.png" alt="ubuntu-15.04-info"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://iblogc.qiniudn.com/2017-02-09-ubuntu-15.04-logo.jpg&quot; alt=&quot;ubuntu-15.04-logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;ubuntu15.04已经发布几个月了，今天准备把家里的笔记本升级下，在这记录下，因为笔记本是14.10的所以下面内容只适用于从14.10升级到15.04的，如果你的系统是14.04，则需要先升级到14.10然后再升级到15.04。&lt;br&gt;
    
    </summary>
    
      <category term="其它" scheme="http://me.iblogc.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="ubuntu" scheme="http://me.iblogc.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>XY-Problem</title>
    <link href="http://me.iblogc.com/2015/07/04/xy-problem/"/>
    <id>http://me.iblogc.com/2015/07/04/xy-problem/</id>
    <published>2015-07-04T15:51:40.000Z</published>
    <updated>2015-09-22T12:41:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>XY问题，一个对我来说比较新的词汇，但可能我们大家平时都遇到过这种问题。</p>
<p>对于“XY问题”，不同的人有不同的解释：</p>
<blockquote>
<p>你想做X，但你认为Y是实现X最好的方法。你不问关于X的事，反而问起Y的事。</p>
<p>— 来自 Re: sequencial file naming by Abigail<a id="more"></a></p>
</blockquote>
<hr>
<blockquote>
<p>你尝试去做X，但你想起了Y方案。于是，你开始问关于Y方案的事，完全不提X。问题是，也许会有更好的方案，但如果你不描述X是什么，我们根本无法出谋划策。<br>— 来自 Re: How do I keep the command line from eating the backslashes? by revdiablo</p>
</blockquote>
<hr>
<blockquote>
<p>有些人问如何去做Y，但他们实际是想做X。他们之所以问如何做Y，因为他们相信Y是实现X最好的方法。人们用各种的“试试这个”来给予帮助，而结果往往是“这不行，因为….”。这给我们提示，依赖环境的不同，你的问题可能会有其它更好的方案。<br>— 来自 Re: Re: Re: Re: regex to validate e-mail addresses and phone numbers by Limbic~Region</p>
</blockquote>
<hr>
<blockquote>
<p>在不理解更大的问题(上下文)X的情况下，去回答问题Y，往往完全无助于解决问题X。<br>— 来自 <a href="&#109;&#x61;&#105;&#x6c;&#x74;&#111;&#x3a;&#109;&#49;&#56;&#122;&#116;&#53;&#109;&#x75;&#113;&#x39;&#x2e;&#102;&#x73;&#102;&#95;&#x2d;&#95;&#64;&#x68;&#x61;&#108;&#102;&#x64;&#x6f;&#109;&#x65;&#x2e;&#104;&#x6f;&#108;&#100;&#105;&#116;&#46;&#99;&#111;&#109;">&#109;&#49;&#56;&#122;&#116;&#53;&#109;&#x75;&#113;&#x39;&#x2e;&#102;&#x73;&#102;&#95;&#x2d;&#95;&#64;&#x68;&#x61;&#108;&#102;&#x64;&#x6f;&#109;&#x65;&#x2e;&#104;&#x6f;&#108;&#100;&#105;&#116;&#46;&#99;&#111;&#109;</a> by merlyn</p>
</blockquote>
<hr>
<blockquote>
<p>也叫做“过早下结论”：有疑问的人希望能解决一些阐述的并不清楚的问题X，他们断定Y是解决方案的一个要素，于是他们就询问如何实现Y。<br>— from <a href="&#109;&#97;&#105;&#108;&#116;&#x6f;&#58;&#80;&#105;&#110;&#101;&#x2e;&#71;&#72;&#80;&#46;&#x34;&#46;&#50;&#49;&#46;&#48;&#x30;&#x30;&#x39;&#48;&#x36;&#49;&#50;&#49;&#x30;&#x35;&#55;&#48;&#46;&#x38;&#x38;&#48;&#x30;&#45;&#x31;&#x30;&#48;&#x30;&#48;&#x30;&#x40;&#x68;&#112;&#112;&#108;&#117;&#x73;&#48;&#x33;&#46;&#x63;&#101;&#x72;&#110;&#x2e;&#99;&#104;">&#80;&#105;&#110;&#101;&#x2e;&#71;&#72;&#80;&#46;&#x34;&#46;&#50;&#49;&#46;&#48;&#x30;&#x30;&#x39;&#48;&#x36;&#49;&#50;&#49;&#x30;&#x35;&#55;&#48;&#46;&#x38;&#x38;&#48;&#x30;&#45;&#x31;&#x30;&#48;&#x30;&#48;&#x30;&#x40;&#x68;&#112;&#112;&#108;&#117;&#x73;&#48;&#x33;&#46;&#x63;&#101;&#x72;&#110;&#x2e;&#99;&#104;</a> by Alan J. Flavell</p>
</blockquote>
<hr>
<blockquote>
<p>XY问题是指，当你需要做X时，你认为可以用Y来实现X，于是你问如何做Y，而你实际应该做的是说明你的X问题是什么。也许会有一个比Y更好的Z解决方案，但如果X没有被说出来，没有人能提出更好的建议。<br>— 来自 <a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#115;&#x6c;&#x72;&#x6e;&#x38;&#57;&#x75;&#x6d;&#x38;&#106;&#46;&#53;&#103;&#x39;&#x2e;&#116;&#97;&#x64;&#109;&#99;&#x40;&#x6d;&#97;&#103;&#110;&#x61;&#x2e;&#x6d;&#101;&#x74;&#114;&#111;&#110;&#x65;&#x74;&#x2e;&#x63;&#x6f;&#109;">&#115;&#x6c;&#x72;&#x6e;&#x38;&#57;&#x75;&#x6d;&#x38;&#106;&#46;&#53;&#103;&#x39;&#x2e;&#116;&#97;&#x64;&#109;&#99;&#x40;&#x6d;&#97;&#103;&#110;&#x61;&#x2e;&#x6d;&#101;&#x74;&#114;&#111;&#110;&#x65;&#x74;&#x2e;&#x63;&#x6f;&#109;</a> by Tad McClellan</p>
</blockquote>
<hr>
<blockquote>
<p>当有人来问如何做一些傻事时，我真的不知道如何去做。我只能照实回答，说我可不要告诉别人如何做傻事…..</p>
<p>但是，一旦我这样做了，人们就会蹦到我面前自作聪明。这种事情经常发生。(“别呀，帮帮这个可怜的人吧，如果你知道他们真的需要知道如何做，你干嘛不告诉他们呢？”)</p>
<p>. . .</p>
<p>另一方面，我可以从另一个层面上回答他们，给他们一个更好的方案，但这种执教也许会让他们脸上不好看。如果他们接受倒好，如果不接受，你会很伤心看到自己的努力和好建议被忽略。同样，人们会蹦到你面前指责你没有直接回答他们的问题。（“谁要你告诉他该怎么做了，你只要回答他的问题就行了。”）</p>
<p>. . .</p>
<p>我想这种两种回答方式生活中都经常会有。但也许没有一种回答会得到好结果。<br>— 来自 <a href="&#109;&#97;&#105;&#x6c;&#x74;&#111;&#58;&#54;&#108;&#x6e;&#x62;&#55;&#x30;&#x24;&#x6c;&#x63;&#116;&#36;&#x31;&#64;&#109;&#x6f;&#x6e;&#101;&#116;&#46;&#x6f;&#x70;&#46;&#x6e;&#x65;&#116;">&#54;&#108;&#x6e;&#x62;&#55;&#x30;&#x24;&#x6c;&#x63;&#116;&#36;&#x31;&#64;&#109;&#x6f;&#x6e;&#101;&#116;&#46;&#x6f;&#x70;&#46;&#x6e;&#x65;&#116;</a> by MJD</p>
</blockquote>
<hr>
<p>部分内容引用自<a href="http://www.vaikan.com/xy-problem/" target="_blank" rel="external">外刊IT评论</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XY问题，一个对我来说比较新的词汇，但可能我们大家平时都遇到过这种问题。&lt;/p&gt;
&lt;p&gt;对于“XY问题”，不同的人有不同的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你想做X，但你认为Y是实现X最好的方法。你不问关于X的事，反而问起Y的事。&lt;/p&gt;
&lt;p&gt;— 来自 Re: sequencial file naming by Abigail
    
    </summary>
    
      <category term="随笔" scheme="http://me.iblogc.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="杂谈" scheme="http://me.iblogc.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>python中的UUID</title>
    <link href="http://me.iblogc.com/2015/06/02/python%E4%B8%AD%E7%9A%84UUID/"/>
    <id>http://me.iblogc.com/2015/06/02/python中的UUID/</id>
    <published>2015-06-02T15:32:59.000Z</published>
    <updated>2015-10-21T16:18:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介（维基百科）"><a href="#简介（维基百科）" class="headerlink" title="简介（维基百科）"></a>简介（维基百科）</h2><blockquote>
<p>通用唯一识别码（英语：Universally Unique Identifier，简称UUID）是一种软件建构的标准，亦为开放软件基金会组织在分散式计算环境领域的一部份。<br>UUID的目的，是让分散式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。如此一来，每个人都可以建立不与其它人冲突的UUID。在这样的情况下，就不需考虑资料库建立时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3档案系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。另外我们也可以在e2fsprogs套件中的UUID函式库找到实现。<a href="http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81" title="通用唯一识别码" target="_blank" rel="external">[3]</a></p>
</blockquote>
<a id="more"></a>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义 :"></a>定义 :</h2><p>UUID是由一组32位数的16进位数字所构成，是故UUID理论上的总数为1632=2128，约等于3.4 x 1038。也就是说若每纳秒产生1兆个UUID，要花100亿年才会将所有UUID用完，，它保证对在同一时空中的所有机器都是唯一的（重复机率请参考<a href="http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81" target="_blank" rel="external">随机UUID的重复机率</a>）。</p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ol>
<li>uuid1()——基于时间戳<br>由MAC地址、当前时间戳、随机数生成。可以保证全球范围内的唯一性，<br>但MAC的使用同时带来安全性问题，局域网中可以使用IP来代替MAC。</li>
<li>uuid2()——基于分布式计算环境DCE（Python中没有这个函数）<br>算法与uuid1相同，不同的是把时间戳的前4位置换为POSIX的UID。<br>实际中很少用到该方法。</li>
<li>uuid3()——基于名字的MD5散列值<br>通过计算名字和命名空间的MD5散列值得到，保证了同一命名空间中不同名字的唯一性，<br>和不同命名空间的唯一性，但同一命名空间的同一名字生成相同的uuid。</li>
<li>uuid4()——基于随机数<br>由伪随机数得到，有一定的重复概率，该概率可以计算出来。</li>
<li>uuid5()——基于名字的SHA-1散列值<br>算法与uuid3相同，不同的是使用 Secure Hash Algorithm 1 算法</li>
</ol>
<h2 id="在python中在生成UUID"><a href="#在python中在生成UUID" class="headerlink" title="在python中在生成UUID"></a>在<code>python</code>中在生成UUID</h2><p><code>import uuid</code>后即可使用<br>示例代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> uuid</div><div class="line">uuid.uuid1()</div><div class="line">uuid.uuid3(namespace, name)</div><div class="line">uuid.uuid4()</div><div class="line">uuid.uuid5(namespace, name)</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><a href="http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81" target="_blank" rel="external">http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81</a><br><a href="https://docs.python.org/2/library/uuid.html" target="_blank" rel="external">https://docs.python.org/2/library/uuid.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介（维基百科）&quot;&gt;&lt;a href=&quot;#简介（维基百科）&quot; class=&quot;headerlink&quot; title=&quot;简介（维基百科）&quot;&gt;&lt;/a&gt;简介（维基百科）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;通用唯一识别码（英语：Universally Unique Identifier，简称UUID）是一种软件建构的标准，亦为开放软件基金会组织在分散式计算环境领域的一部份。&lt;br&gt;UUID的目的，是让分散式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。如此一来，每个人都可以建立不与其它人冲突的UUID。在这样的情况下，就不需考虑资料库建立时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3档案系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。另外我们也可以在e2fsprogs套件中的UUID函式库找到实现。&lt;a href=&quot;http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81&quot; title=&quot;通用唯一识别码&quot;&gt;[3]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="程序猿" scheme="http://me.iblogc.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
    
      <category term="python" scheme="http://me.iblogc.com/tags/python/"/>
    
      <category term="uuid" scheme="http://me.iblogc.com/tags/uuid/"/>
    
  </entry>
  
</feed>
